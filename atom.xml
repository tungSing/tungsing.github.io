<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TungSing&#39;s Blog</title>
  
  <subtitle>用心记录一切！</subtitle>
  <link href="http://tungsing.cc/atom.xml" rel="self"/>
  
  <link href="http://tungsing.cc/"/>
  <updated>2022-01-11T09:11:05.413Z</updated>
  <id>http://tungsing.cc/</id>
  
  <author>
    <name>tungSing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>清醒思考的艺术阅读笔记</title>
    <link href="http://tungsing.cc/2022/01/06/book/the_art_of_thinking_clearly/chapter_two/"/>
    <id>http://tungsing.cc/2022/01/06/book/the_art_of_thinking_clearly/chapter_two/</id>
    <published>2022-01-06T10:01:23.161Z</published>
    <updated>2022-01-11T09:11:05.413Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>记录一下阅读该书籍的理解与感想。</p></blockquote><h4 id="026：忽视概率偏误"><a href="#026：忽视概率偏误" class="headerlink" title="026：忽视概率偏误"></a>026：忽视概率偏误</h4><blockquote><p>累计奖金为什么会越来越多</p></blockquote><p>有两种赌博：第一种赌博你有可能赢1000万欧元，第二种赌博你可能赢1万欧元。你会参加哪一种呢？如果你在第一种赌博里赢了，你的生活将会彻底改变：你可以辞掉工作，从此靠利息生活。如果你在第二种赌博里赢了，你可以美美地前往加勒比海度假，然后一切照旧。第一种赌博赢的概率是亿分之一，第二种赌博赢的概率是万分之一。好吧，你会玩哪一 种？我们的感情冲动会将我们拉向第一种，虽然客观地看，第二种赢的概率要大无数倍。因 此累计奖金越来越多——数百万、数亿、数万亿美元——无论赢的机会是多么微弱。　　</p><p>结论：我们很难区分各种风险，除非风险为零。由于我们不能直觉地理解风险，我们必须计算。在概率公开的地方——像彩票——这就很容易。而在普通生活中，风险很难估计，但又是躲也躲不过的。</p><p>个人理解：我们对生活中的概率不太敏感，以后遇到有事情要多思考概率的大小，以便做出合理的判断。</p><span id="more"></span><h4 id="027：零风险偏误"><a href="#027：零风险偏误" class="headerlink" title="027：零风险偏误"></a>027：零风险偏误</h4><blockquote><p>你为什么会为零风险支付过多</p></blockquote><p>我们常愿意投资过多的钱，就为了彻底消除微小的剩余风险。几乎在所有情况下，人们本来都能更好地投资这笔钱，更显著地降低另一种风险。人们把这种思维错误称为零风险偏误。</p><p>在道路交通中，只有当速度限制降到每小时零公里，才能达到零风险。在这里，我们理性地容忍可以明确统计的每年的死亡人数。</p><p>假设你是国家首脑，你想排除恐怖袭击的风险。那你必须派给每个市民一名间谍，每名间谍再派一名间谍。那么很快，90%的人口就都成了间谍。我们知道，这样的社会是不存在的。</p><p>那么在股市中呢？股市中存在零风险吗？很可惜，不存在。即使你卖掉股票，将钱存进 你的账户，银行也有可能破产，通货膨胀也会蚕食掉你节约下的钱，或者一次货币改革也可 能会毁掉你的财产。</p><p>结论：请你告别零风险的想象，学会怀着“没有什么是安全的”想法生活——无论是你的积蓄、你的健康、你的婚姻、你的友谊、你的敌人，还是你的土地。请你满足于至少有东 西让你保持相对稳定并体验自身的快乐。研究表明，无论是中了百万彩票还是半身瘫痪都不会长期改变你的满意程度。不管发生什么事，快乐的人照样快乐，不快乐的人依旧不快乐。 </p><p>个人理解：不存在零风险的，我们要做的就是分析风险的概率，选择有利于我们的风险，快乐的生活就好。</p><h4 id="028：稀少性谬误"><a href="#028：稀少性谬误" class="headerlink" title="028：稀少性谬误"></a>028：稀少性谬误</h4><blockquote><p>为什么饼干越少越好吃</p></blockquote><p>斯蒂芬·沃切尔将受试者分成两组，请他们评价饼干的质量。第一组得到整整一盒饼 干，第二组只得到两块。结果：第二组受试者对饼干质量的评价要比第一组高得多。这一试 验经过多次重复——结果都相同。</p><p>结论：我们对稀少性的典型反应是丧失清晰思考的能力。因此请你仅按价格和作用判断 一样东西。你不要在乎它是否稀少，是否有哪位“伦敦来的医生”也想要它。</p><p>个人理解：生活或工作中我们要对“库存清货”、”仅今日有售“等警惕，也要可以利用物以稀为贵。</p><h4 id="029：忽视基本比率"><a href="#029：忽视基本比率" class="headerlink" title="029：忽视基本比率"></a>029：忽视基本比率</h4><blockquote><p>当你在怀俄明州听到马蹄声、见到黑白条纹时……</p></blockquote><p><strong>忽略基本比率</strong>（Neglecting Base Rates）是一种几率谬误，系因不明统计学上的基本比率导致的推论谬误。</p><p>例子：一名少年被刀砍成重伤。根据以上描述，下列哪种情况的可能性更大呢？(1)凶手是个非法持有刀具的波斯尼亚人；（2)凶手是个来自中产阶层的德国少年。现在你知 道答案了：答案是(2)的可能性要大得多，因为比起带刀的波斯尼亚人，德国少年要多得多。</p><p>结论：好好学概率论，凡事多想一下基本比率。</p><h4 id="030：赌徒谬误"><a href="#030：赌徒谬误" class="headerlink" title="030：赌徒谬误"></a>030：赌徒谬误</h4><blockquote><p>为什么没有一种平衡命运的力量</p></blockquote><p><strong>赌徒谬误</strong>（The Gambler’s Fallacy）亦称为<strong>蒙地卡罗谬误</strong>（The Monte Carlo Fallacy），是一种几率谬误，主张由于某事发生了很多次，因此接下来不太可能发生；或者由于某事很久没发生，因此接下来很可能会发生。</p><p>一枚硬币被连抛3次，每次都是人头朝上。假如有人强迫你，让你自己掏出1 000欧元为 下一抛下注。你会押人头还是数字呢？如果你像大多数人那样思考，你会押数字，虽然人头同样是有可能的——这就是著名的赌徒谬误。</p><p>将一枚硬币连抛50次，50次都是人头朝上。又有人强迫你为下一抛押1 000欧元。你会押 人头还是数字呢？你淡定地微微一笑，因为你已经读了这一章，知道之前的结果无关紧要。 但如果你足够理智，你肯定会押人头，因为你必然会想到，这枚硬币应该是镀锌的。</p><p>结论：请你仔细观看，看你面对的是否是独立的事件——不过这主要存在于赌场、彩票 和理论书籍里。现实生活中这些事件大多有着相互联系——已经发生的事情，会影响未来将要发生的事情。因此请你忘记命运的平衡力量(除了回归均值的情形）。</p><p>个人理解：遇事先分析事情间联系的强弱，如果关联很弱，看看是否为一个独立事件，如果是独立事件就要避免落入赌徒谬误的陷阱中。</p><h4 id="031：锚定效应"><a href="#031：锚定效应" class="headerlink" title="031：锚定效应"></a>031：锚定效应</h4><blockquote><p>数字轮盘如何搞得我们晕头转向</p></blockquote><p>人类在进行决策时，会过度偏重先前取得的资讯（这称为锚点），即使这个资讯与这项决定无关。在进行决策时，人类倾向于利用此片断资讯（锚点），快速做出决定。在接下来的决定中，再以第一个决定为基准，逐步修正。但是人类容易过度利用锚点，来对其他资讯与决定做出诠释，当锚点与实际上的事实之间的有很大出入，就会出现当局者迷的情况。</p><p>心理学家阿莫斯·特沃斯基拿出一个数字轮盘，让受试者转动轮盘，然后问他们，联合 国有多少成员国。那些轮盘停在一个较大数字上的人，给出的成员国的数量就会大于轮盘停 在较小数字上的人给出的数量。</p><p>现实生活中，锚定效应随处可见。科学证明，如果老师知道一位学生过去的学习成绩， 就会影响他给学生的新论文打分。在这里，过去的成绩起了锚定的作用。许多产品在包装袋 上刊印的“建议销售价”也是一个锚定。职业销售人员知道，他们必须先设定一个锚——远在他们报价之前。</p><p>个人理解：在产品销售上可以利用锚定效应，买产品的时候要警惕锚定效应。</p><h4 id="032：归纳法"><a href="#032：归纳法" class="headerlink" title="032：归纳法"></a>032：归纳法</h4><blockquote><p>如何把别人的钱弄进自己的口袋</p></blockquote><p>一个农民喂食一只鹅。一开始鹅畏畏缩缩，想：“这个人为什么要喂我？这背后一定有 什么阴谋。”数星期过去了，农民天天都过来，扔给它谷子。它的疑心渐渐减弱。几个月后 这只鹅肯定地想：“这个人很喜欢我！”——这一信念每天都得到证明，于是它越来越坚定。 它对农民的善良坚信不疑。鵝没料到，农民在圣诞节会将它从鹅舍里取出并杀掉。这只圣诞 鹅成了归纳法思考的牺牲品。大卫·休谟早在18世纪就举过同样的例子，警告人们要小心归 纳法。可犯这种错误的不仅是鹅，我们大家都有由观察个体得出普遍适用的结论的倾向。这 是危险的。</p><p>我们也可以利用归纳法进行思考。这里将告诉你如何使用归纳法从别人的口袋里掏钱。 请你寄出100000份股指预测的邮件。你在一半邮件里预测下个月股票行情会上升，在另一半 邮件里预测股票行情将回落。假定一个月后股指回落了，你就再发一遍邮件，这回只发给你 作出了正确预测(股指会跌)的那50000人。你再将这50000人分成两组，写信给第一组，说股 指在接下来的一个月会上升，给另一组写信说股指会跌。如此类推，10个月后还剩下100个 人，你给他们作的预测从没有出错。在这100个人的眼里你就是英雄。你证明了，你拥有真正 的先知式的预测能力。于是这100个人中的几位会将他们的财产托付给你。然后你就可以怀揣 这笔钱逃去巴西了。</p><p>因此归纳式思考有时会产生严重后果，但没有它也不行。我们相信，当我们登上飞机 时，气体动力学的原理明天也管用。我们估计，我们不会在大街上被无缘无故地殴打。我们 指望，我们的心脏明天也照常跳动。我们需要归纳法，但我们不可以忘记，所有确信都只是暂时的。本杰明?富兰克林怎么说来着？ “除了死亡和税收，没有什么是肯定的。”</p><p>归纳法有可能具有诱惑性：“人类一直都是成功的，因此我们也将征服未来的挑战。”听起来不错，但我们没有考虑：只有那些幸存到现在的物种才能这么说。以我们存在的事实 来说明将来我们也会存在，这是一个严重的思维错误——估计是最严重的。　　</p><p>个人理解：遇到利用归纳法得出的结论要多加小心，所有的确信都是暂时的，要尝试寻找一下反例。　　　</p><h4 id="033：规避损失"><a href="#033：规避损失" class="headerlink" title="033：规避损失"></a>033：规避损失</h4><blockquote><p>为什么凶恶的面孔比友善的面孔更容易引起我们注意</p></blockquote><p><strong>损失规避</strong>（英语：<strong>Loss aversion</strong>）是指人们面对同样数量的收益和损失时，认为损失更加令他们难以忍受。损失带来的负效用为收益正效用的2至2.5倍。损失厌恶反映了人们的风险偏好并不是一致的，当涉及的是收益时，人们表现为风险厌恶；当涉及的是损失时，人们则表现为风险寻求。</p><p>人们害怕失去某种东西的想法要比获得某种同等价值的东西的想法强烈。假定你是为房 屋提供隔热层的。假如你告诉顾客，缺少隔热层他们有可能损失多少钱，就要比告诉他们使 用好的隔热层他们能够节约多少钱，更能说服他们在房屋里使用隔热层。虽然其实金额是一 样的。　　</p><p>员工(如果他们是独自承担责任，而不是集体作决定的话)都有畏惧风险的倾向。站在他 们的立场，这样做是有意义的：如果做成某件事情最多会带给他们一笔奖金，但一旦失败就 有可能让他们丢掉工作岗位，那他们干吗要冒这种风险呢？在几乎所有公司的所有情况下，风险都大于可能的收益。如果你作为董事长抱怨你的员工缺少冒险精神，那你现在知道是为 什么了——规避损失。</p><p>我们无法改变：恶比善更有影响力。我们对不利东西的反应要比对有利东西的反应敏感。走在大街上，一张凶恶的脸要比一张友善的脸更容易引起我们注意。恶行要比善行更久 地留存在我们的记忆里。当然也有例外：在事关我们自己的时候。　　</p><p>个人理解：规避风险是人类与生俱来的，我们要理解和利用好损失规避，比如说服老板干一件事情的时候，收益和风险是一样的情况下，可以选择表达倾向于损失，这样冒险倾向就会增加。</p><h4 id="034：社会性懈怠"><a href="#034：社会性懈怠" class="headerlink" title="034：社会性懈怠"></a>034：社会性懈怠</h4><blockquote><p>团队为什么会使人懒惰</p></blockquote><p>马克西米利安·林格尔曼是一位法国工程师。1913年，他对马拉车的效率进行调查。他 发现：两匹马一起拉一驾马车，效率并非一匹马效率的双倍。这一结果令他意外，遂将他的 调查延伸到人类。他让许多人一起拉一根绳子，测量每人释放出的力量。他发现两个人一起 拉一根绳子，平均每人只投入其力量的93%,如果是3个人一起拉，每人只投入85%, 8个人一 起拉时就只剩下49% 了。除了心理学家，这个结果没让任何人感到意外。科学界称这一效应为社会性懈怠。</p><p>社会性懈怠是一种理性行为：假如使出一半力就行，又不会引起注意，为什么要使出全力呢？一句话，社会性懈怠是一种我们让自己亏欠所有人的欺骗形式。这一欺骗大多不是故 意的，而是不知不觉地发生的——就像马拉车一样。</p><p>社会性懈怠不仅出现在体能效率方面，我们在精神上也会懈怠，比如开会的时候。团队越大，我们个人参与的程度就越小–定大小的团队，当效率达到一个水时，就不会继续下降了。此时一支团队有20人还是100人，再也无关紧要，它已达到了最大的懒惰度。</p><p>结论：人们在团队里的行为不同于单独一人的时候(否则就不存在团队了）。可以通过尽可能彰显个人效率，来缓和团队的弊病。</p><p>减少社会惰化的途径</p><ol><li>合理控制团队成员，团队不宜过大，大团队应该再分成若干个小团队。</li><li>公布团队每个成员的业绩，同时根据团队成员的贡献、业绩进行评价。</li><li>帮助团队成员认识到其他成员的工作业绩，使他们了解不仅自己是努力工作的，他人也是努力工作的。</li><li>团队合理分工，权责分明。</li></ol><p>个人理解：作为团队领导要通过管理手段来来是团队发挥最大效率，避免陷入社会性懈怠中。</p><h4 id="035：指数增长"><a href="#035：指数增长" class="headerlink" title="035：指数增长"></a>035：指数增长</h4><blockquote><p>一张对折的纸为什么会超出我们的想象</p></blockquote><p>如果我们假设，一张纸的厚度为0. 1毫米，那么对折50次之后它的厚度 就是一亿千米。这相当于地球到太阳的距离，使用计算器很容易计算出来。</p><p>有一位政治家说：“交通事故的数量每年递增7%。”老实说，我们无法直观地理解这意 味着什么。因此，请你使用一个窍门：计算倍增时间。请用数字70除以增长的百分比。在上 述情况下，倍增时间为70 除以7=10(年）。于是这位政治家的意思是：“交通事故的数量每10年 翻一倍。”这相当令人警惕。</p><p>结论：当事关增长率时，请不要相信你的感觉。你的感觉是没有用的——请你承认这一 点。真正有助于你的是计算器，或者，在增长率小时，就使用计算倍增时间的诀窍。</p><p>个人理解：现在高速发展的时代，要警惕百分比的情况，多思考几分钟，如果心算得不到直观的答案，请掏出手机用计数器计算，不丢人。　　</p><p><strong>70规则（Rule of 70）</strong> 是经济学里面的一个古老规律，是估计的捷径。70规则是指用来评估在当前的通货膨胀率水平下，物价需要花费多长时间才能翻一番的计算方法。假设一个经济体每年的通货膨胀率都相同，那么用70除以每年的通货膨胀率就可以得到物价翻番的年份。70规则还可以用来判断或翻番的年份。所以，可以说“70规则”是指某个变量年增长率为X%，则该变量在70/X年内将会翻一番。</p><h4 id="036：赢家的诅咒"><a href="#036：赢家的诅咒" class="headerlink" title="036：赢家的诅咒"></a>036：赢家的诅咒</h4><blockquote><p>你愿意为100欧元付出多少钱？</p></blockquote><p>赢家的诅咒是指：拍卖的赢家大多是事实上的输家。</p><p>你会为100欧元支付多少钱呢？请你想象一下，你和你的竞争对手被邀请参加这么一场拍 卖。游戏规则是：谁出价最高，谁就能得到这张100欧元的钞票；还有，很重要的一点是，两 位出价者都必须支付他们最后的报价。你会出到多高呢？在你看来，为这张100欧元的钞票支 付20、30或40欧元都是值得的。你的竞争对手当然也是同样的看法。哪怕支付99欧元都是有 意义的。现在你的竞争对手出到了 100欧元。如果这是最高报价，他会以零利润结束，但你必 须支付99欧元(你最后的出价)——没有回报。于是你会继续出价。出到110欧元时你肯定会损 失10欧元，但你的竞争对手会损失109欧元(他最后的报价)。因此他也会继续出价。你会在哪 里停止呢？你的竞争对手会在哪里停止呢？请你跟你的朋友们玩一次吧。</p><p>建议：“千万不要参与拍卖。”做不到？你是在一个无法躲开 拍卖的行业工作？那你就确定一个最高价，从中扣除20%支付赢家的诅咒效应。请你将这个数 字写在一张纸上，然后坚决遵守它。</p><p>个人理解：竞标的时候一定要事先定好最高价，然后严格执行；避免陷入赢家的诅咒，最后交付不了而破产。</p><h4 id="037：基本特征谬误"><a href="#037：基本特征谬误" class="headerlink" title="037：基本特征谬误"></a>037：基本特征谬误</h4><blockquote><p>千万别问一位作家他的小说是不是自传</p></blockquote><p>基本特征谬误是指，系统性地高估人的影响，在解释某些东西时低估情境因素。</p><p>尤其是在面对负面事件时，基本特征谬误会体现得更明显。我们将战争的“罪责”推给个人——第二次世界大战是希特勒的错，第一次世界大战是萨拉热窝的行剌者的错。虽然战 争是不可预见的事件，我们至今无法理解它的成因。因此，我们总是先在企业老板身上寻找业务好坏的原因。即使我们本该知道，领导才能 对经济成功的影响程度要远远小于普遍的经济形势和行业的影响力。有趣的是，在一个存在 危机的行业里，首席执行官们常被撤换，而在朝阳行业里却很少发生这样的事。这种决定一 点儿也不比更换足球俱乐部的教练的决定理智。</p><p>身为作家，我遇到的基本特征谬误是这样的：在每次读者见面会上，我碰到的第一个问 题总是：“你的小说里有什么是自传性质的吗？”我真想对着在座的人大喊：“见鬼，我们 要谈的可不是我，而是这本书，是书的文字、语言，是故事的可信性！”可惜我接受的教育不允许我这样发作。<br>　　<br>另外，我们也必须理解基本特征谬误：极度关注他人源自我们过去的进化史，隶属于一 个群体是生存所必需的，被排斥意味着死亡。繁殖、自卫和狩猎，大多是个体做不到的。我 们需要别人协助。特立独行的人——其中肯定有一些——早就从基因池里消失了。因此我们 才会这样过度地关注人。我们将90%的精力都用来关注人，只用10%的精力关注情境。</p><p>结论：不管戏剧多么让我们着迷，舞台上的人绝非孤立的，他们的表演离不开一个个情境。你若真想理解正在表演的戏剧，就请你不要只注重表演者，而是多关注他们的表演或舞蹈。</p><p>个人理解：要综合的看待事情，古人都告诉我们了，一件事情的成功离不开天时、地利、人和。</p><h4 id="038：错误的因果关系"><a href="#038：错误的因果关系" class="headerlink" title="038：错误的因果关系"></a>038：错误的因果关系</h4><blockquote><p>你为什么不该相信仙鹤送子</p></blockquote><p>最常见的因果谬误包括：把相关当因果、把必要当充分、把可能当必然</p><ol><li><strong>把相关当因果,也就是过于简单化因果关系的前因，给出的原因只是和结果相关，而不足以推论出结果。</strong><br>错误的因果关系的最好例子是出生率下降和德国的仙鹤配偶数量下降之间的联系。如果 画出1965~1987年两条线的发展，它们几乎可以完美地重叠在一起。那么，真的是仙鹤送子吗？不可能。因为这是一个纯属巧合的相互关系，肯定不是因果关系。</li><li><strong>把必要当充分</strong><br> 比如，如果想要成为钢琴家，坚持练琴是必要条件，但井不代表坚持练琴就一定能成为钢钢琴家。</li><li><strong>把可能当必然</strong><br> 比如你的同事说自己上一次的汇报表现不好，然后就觉得晋升无望了，事业不会再有发展了。</li></ol><p>结论：相互关系不等于因果关系。你要看仔细。有时两者之间因果恰恰相反，有时两者 之间根本就没有因果关系——就像仙鹤和婴儿一样。</p><p>个人理解：当我们在分析问题的时候，其实最重要的就是对问题的原因进行分析，但是导致一个事情结果的原因往往不是单一的，所以这时我们需要提高警惕，避免自己或他人出现因果谬误，对问题进行简单粗暴地归因。</p><h4 id="039：光环效应"><a href="#039：光环效应" class="headerlink" title="039：光环效应"></a>039：光环效应</h4><blockquote><p>长相好的人为什么容易事业有成</p></blockquote><p>光环效应是指：我们让某一个方面照花了眼睛，并由此推及全貌。</p><p>心理学家爱德华·李·桑代克在近100年前发现了光环效应。如果某人的某一个方面（比 如美貌、社会地位、年龄)造成了正面或负面的印象，那么它将“普照”其他的一切，从而过 度影响其总体印象。美貌是得到研究最多的例子。几十项研究都证明，我们会自动认为漂亮 的人更可爱、更诚实、更聪颖。事实也证明，有魅力的人更容易事业有成。光环效应在学校 里就已经得到了证明：教师们会本能地给长相好的学生打出更高的分数。</p><p>结论：光环效应挡住了我们的视线，让我们看不到真实的特征。因此你要看仔细。请你排除醒目的特征。世界级交响乐队就是这么选择队员的，他们让选手在一块幕布后面演奏， 通过这样做来避免性别、种族或外貌影响他们的评价。我衷心地建议经济记者们，不要靠季 度数据来评价一家公司（这已经有股市解决了），而要更深入地挖掘下去。这样挖掘出的东 西，并不总是漂亮的，但有时很有教益。</p><p>个人理解： 对待事物的时候要警惕从多方面，多角度立体、全面的了解，避免陷入光环效应中。　　</p><h4 id="040：替代途径"><a href="#040：替代途径" class="headerlink" title="040：替代途径"></a>040：替代途径</h4><blockquote><p>恭喜你赢了俄罗斯轮盘赌</p></blockquote><p>替代途径是指，所有同样可能发生但没有发生的事情。</p><p>替代途径是无形的，因此我们很少会想到它们。任何玩垃圾债券、期权和信用违约互 换，挣到数百万欧元的人，都不该忘记，他同时有一堆危险的替代途径，它们会直接将他拖 进毁灭。</p><p>结论：风险从来不是一眼就能看到的。因此，请你时刻考虑你有什么样的替代途径。比起你通过无惊险的平凡途径（比如从事律师、牙医、滑雪教练、飞行员或企业顾问的辛苦工 作)获得的成功，别拿通过冒险的替代途径获得的成功太当真。蒙田怎么说来着：“我的生命充满不幸——这些不幸大多没有发生。”</p><p>个人理解：做事情前，考虑一下风险，如果风险发生是否是你能承受的。</p><h4 id="041：预测的错觉"><a href="#041：预测的错觉" class="headerlink" title="041：预测的错觉"></a>041：预测的错觉</h4><blockquote><p>水晶球如何歪曲了你的目光</p></blockquote><p>伯克利大学的教授分析了总共284位专家在10年内所作的82361个预言。结果，预测 的准确性几乎不及你询问一台随机数字生成器。事实证明，最糟的预测家恰恰是那些媒体关 注度最高的专家，尤其是世界灭亡预言家，其中又以瓦解论的代表为最——我们还一直在等 待加拿大、尼日利亚、中国、印度、印度尼西亚、南非、比利时和欧盟的瓦解呢(奇怪的是没 有专家想到过黎巴嫩）。</p><p>什么可以预测，什么不可以预测呢？比如我在预测我一年内的体重变化时误差就不会太大。而一件事情越复杂、时间跨度越长，其未来的发展变化就越多。气候变暖、油价或汇率的走势几乎是不可以预测的。发明则是完全不可能预测的。如果我们知道有一天我们会有幸获得什么技术，它们此刻就已经被发明出来了。</p><p>结论：请你对预测持批评态度。我为此训练出了一种条件反射——我会对每个预测报以 一笑，以此去除它的装腔作势，随后我会问自己两个问题。第一，这位专家的预测有何约束机制？假如他是雇员，如果他不断出错，他会失去他的工作吗？或者他只是一个自封的预测大师，靠图书和报告增加他的收入？第二，这位专家的预测准确率有多高？他在过去5年里作 过多少预测？其中有多少应验了，有多少落空了？我希望媒体在发布所有预测时，一同公布被误以为是大师的人们的成绩证明。最后，我要引用英国前首相托尼?布莱尔的一句话：“我不作预言。我从没做过，我永远不会做。”</p><p>个人理解：专注当下，停止预测，也不要太关注专家的预测。</p><h4 id="042：关联谬误"><a href="#042：关联谬误" class="headerlink" title="042：关联谬误"></a>042：关联谬误</h4><blockquote><p>有说服力的故事为什么会误导人</p></blockquote><p><strong>关联谬误</strong>指的是一种轻率概化方面的非形式归纳谬误，此类的谬误借由利用实质上不相关的关联（且常常诉诸情感）的论述，主张说某事物持有的性质也存在于另一种事物之上。</p><p>这里举一个例子，你看看哪种可能性更大：（1)法兰克福机场关闭了，航班被取消了； (2)法兰克福机场因天气恶劣关闭了，航班被取消了。这回你肯定能答对：答案（1)的可能性 更大，因为答案(2)必须满足另外一个条件，也就是恶劣天气。机场也可能是由于炸弹威胁、 意外事故或罢工关闭的。只是面对“可信的故事”我们不会想到这些事，至少，当我们——像你现在这样——对它们不敏感的时候。请你与你的朋友们做做这个测试。你会看到，大多数人都会选答案(2)。</p><p>结论：请你忘记“左半脑和右半脑”的说法吧，更重要的是直觉思维和有意识的思维之 间的区别。直觉思维偏好可信的故事，作重要决定时不顺从它们对你是有好处的。</p><p>个人理解：涉及情感的故事要警惕，摘除情感后看看有没有意外收获。</p><h4 id="043：框架效应"><a href="#043：框架效应" class="headerlink" title="043：框架效应"></a>043：框架效应</h4><blockquote><p>言为心声</p></blockquote><p>框架效应是指：视表达方式的不同，我们会对同样的事情做出不同的反应。</p><p>看一个例子，研究人员拿出两种肉：99%无脂的和1%含脂的。被问者都认为第一种肉更健康，虽然两种肉其实是一样的。即使是在98%无脂的和1%含脂的肉之间进行选择时，大多数被问者还是会选第一种肉——即使事实上它含有的脂肪是第二种肉的两倍。</p><p>作家们会有意识地使用框架效应。因为如果按照时间顺序，一步步描写出谋杀过程，侦 探小说就会很无聊。那将不是侦探小说，而是纪实作品。虽然最后都是讲述了整个故事，但 合理地利用框架效应才让故事更加吸引人。　　</p><p>结论：你要意识到，没有框架效应，你什么也不能描述，每个事实——不管你是从一位 朋友那儿听到的，还是在一份严肃的报刊上读到的——都会受到框架效应的影响。本章也不 例外。</p><p>个人理解：我们要懂得合理利用框架效应，比如打广告，写作、汇报工作等，也要清醒的分辨是否有框架效应。</p><h4 id="044：行动偏误"><a href="#044：行动偏误" class="headerlink" title="044：行动偏误"></a>044：行动偏误</h4><blockquote><p>为什么不行动光等待是种痛苦</p></blockquote><p>足球运动员罚点球，有1/3的概率是射向球门中央，1/3的概率射向左边，1/3的概率射向 右边。守门员会怎么办？他们或者扑向左，或者扑向右。反正他们很少待在中间——虽然有 1/3的球会射向那里。这是为什么？因为扑向错误的一侧要比傻瓜似的呆立原地，看着球从左 边或右边飞过去好看得多，看起来也没那么难堪。这就是行动偏误：即使毫无用处，也要采取行动。</p><p>为什么会有行动偏误？在一个狩猎采野果的环境中，行动比思考价值大得多。在过去， 闪电式反应关乎生死存亡，思考则可能会致命。如果我们的祖先看到森林边缘出现一个看上 去像是剑齿虎的影子，他们不会像罗丹的“思想者”那样坐到一块石头上，去进行分类学思考。他们会逃跑，而且是拔腿就跑。我们全都是这些迅速反应者的后代，他们宁可不必要地 多逃跑一次。但我们今天的世界与过去不同——与行动相比，今天的世界奖励深刻的思考。 这一转向让我们很难适应。</p><p>结论：在不明情形下我们会产生要做点什么的冲动，随便什么——不管它有没有帮助。 之后我们会感觉好受些，虽然其实什么也没有好转——事实甚至往往正好相反。因此，如果 情况不明，请你不要采取任何行动，直到你能更好地分析形势。你要克制自己。“人类的全 部不幸就是他们不能安静地待在他们的房间里。”帕斯卡尔就曾经这么写道，在他的书房里。</p><p>个人理解： 在现在文明社会里，还是思考比立即行动更有作用，做事情前请多思考。</p><h4 id="045：不作为偏误"><a href="#045：不作为偏误" class="headerlink" title="045：不作为偏误"></a>045：不作为偏误</h4><blockquote><p>为什么你不是答案就是问题</p></blockquote><p><strong>不作为偏误</strong>是指一个人在面对不作为和作为时倾向选择前者。它的产生有多种原因，包括心理惯性对交易成本的认知，以及认为若不作为和作为会造成同样严重后果，作为比不作为更糟糕或不道德。</p><p>不作为偏误解释了，为什么我们更喜欢让某人自己撞上刀口，而不愿直接伤害他。</p><p>投资者和经济记者们感觉不研发新产品不如研发错误产品严重，虽然两者都会导致公司破产。</p><p>我们觉得死抱着几年前买的一堆差股票不卖不如卖了再买错股票严重；</p><p>不在一座煤电厂安装废气清洗器不如因成本原因拆除废气清洗器严重；</p><p>不给自己的房子安装隔热层不如为了取暖燃烧明火严重；</p><p>不声报收入不如伪造纳税资料严重——虽然结果都是相同的。</p><p>不作为偏误的形势大多是一目了然的：今天的行为可以防止未来的损害，但防 止损害对我们的激励并不强。不作为偏误很难辨认——放弃行动不像采取行动那么容易看出。</p><p>解释：“为什么你不是答案就是问题” 这句话意思是“如果你不解决问题，那你等于就是在延续问题、加重问题”，当然你就成了 “问题的一部分”</p><h4 id="046：自利偏误"><a href="#046：自利偏误" class="headerlink" title="046：自利偏误"></a>046：自利偏误</h4><blockquote><p>你为什么从不自责</p></blockquote><p>成功归于自己，失败归于外因。这就是自利偏误。</p><p>满分总是你自己的功劳，这么优秀的成绩反映了你的真实能力。如果你出现一次掉队，考了个低分呢？那就是考 试不公正。今天你不再在乎学校的分数，但你也许会关心股市行情。赚钱了，你沾沾自喜；亏钱了，你怪罪“股市氛围”或你的投资顾问。</p><p>如果公司这一年经营出色，首席执行官就会将其归因于他英明的决定、他本人不知疲倦的奉献和他所宣扬的活 跃的企业文化。相反，如果公司这一年经营不善，责任就都是欧元走强、政府的政策、中国 人的贸易活动、美国人的隐形关税，还有消费者的压抑情绪等。　</p><p>如何应对自利偏误呢？你有对你直言不讳的朋友吗？如果有，你很幸运。如果没有，那 你至少有个死对头吧？好，那你就挑战一下自己，请他喝咖啡，请他不加掩饰地说出对你个 人的意见。你会永远感激他的。</p><p>个人理解：这个情况还是非常普遍的，我们要做的就是认识到慢慢改善自己。别人有自利偏误一笑了之，心里有数就好。</p><h4 id="047：享乐适应症"><a href="#047：享乐适应症" class="headerlink" title="047：享乐适应症"></a>047：享乐适应症</h4><blockquote><p>你为什么应该缩短上班路程</p></blockquote><p>事业上迈进了一步的人在平均3个月后的幸福感又与先前一样了。就连那些非要驾驶最新款保时捷的人也一样。科学里称这一效应为享乐适应症： 我们工作、升迁，给自己购买更多更漂亮的东西，但我们不会变得更幸福。</p><p>科学的建议：</p><p>（1)请你避免很长时间也不会习惯的负面效应，例如往 返交通、噪音、慢性疲累等；</p><p>（2)请你对物质的东西只期待短期效果，例如汽车、房屋、分 红、中彩票、得金奖等；</p><p>（3)持续的正面效应主要与你如何利用你的时间有关。你要设法让自己得到尽可能多的自由时间和自主权。请你做你最爱做的事情——哪怕你要付出部分收入。 请你为友谊投资。</p><p>个人理解：任何物质或者升职等情况给我们带来的幸福和快乐都是短暂的，我们要把尽可能的时间投资到自己喜欢的事情上，这样就可能持续快乐和幸福了。</p><h4 id="048：自我选择偏误"><a href="#048：自我选择偏误" class="headerlink" title="048：自我选择偏误"></a>048：自我选择偏误</h4><blockquote><p>请不要惊讶有你存在</p></blockquote><p>自我选择偏误：当我们本身是抽样样品的一部分时，我们总是认为自己是特殊的，实际上我们不过是那个大样本中的一个。</p><p>自我选择偏误无所不在。营销负责人经常会掉进它的陷阱。例如：一家时事通讯报社给 他的客户寄去一张调查表，旨在调查他们觉得这份时事通讯报有多重要。可惜只有订阅了这 份报纸、尚未退订的客户收到了调查表——也就是对报纸较为满意的客户（其他人不再做样 品）。结果这调查自然是无用的。</p><p>特别有趣的是最近的一项电话调查：一家公司想查明 每个家庭平均有多少部电话(包括座机和手机)。在分析调查结果时，他们居然对没有一个家 庭声称没有电话而感到吃惊。这真是太可笑了！</p><p>解决方法：从自己样本的身份和角度中跳出来，分清楚总体和自己所处的样本位置。</p><h4 id="049：联想偏误"><a href="#049：联想偏误" class="headerlink" title="049：联想偏误"></a>049：联想偏误</h4><blockquote><p>为什么经验有时让人变蠢</p></blockquote><p>我们的大脑是一部联想机器。原则上这样也很好：我们食用一种陌生果子，食后我们感觉不舒服，于是将来我们就会回避相应的植物，认为它的果子有毒或至少是吃不得的。知识就是由此形成的。只是，错误的知识也是这么形成的。</p><p>我们从中可以学到什么？没有谁讲得比马克·吐温更贴切了： “我们应该注意，一个经历里隐藏着多少智慧，我们就只吸取多少——不要多；好让我们不像坐过热灶台的猫一样。 被烫过的猫永远不会再坐到热灶台上去——这是对的；但它也永远不会再坐到冷灶台上去 了。”　　</p><p>个人理解：在某种情况下，我们的大脑会把彼此毫无关系的两样东西联结在一起。假如我们收获到错误知识，我们要通过思考和验证把错误的联系给删除掉。</p><h4 id="050：新手的运气"><a href="#050：新手的运气" class="headerlink" title="050：新手的运气"></a>050：新手的运气</h4><blockquote><p>假如开始时一切顺利，请务必多加小心</p></blockquote><p>新手的运气是联想偏误的一种特殊情况：错误地与从前的成功建立联系。</p><p>新手的运气在经济生活里扮演着重要角色：A公司买下了较小的B、C、D公司。由于每次 收购都很成功，A公司领导信心倍增，相信自己擅长收购公司。因为受到鼓舞，A公司又买下了比它大得多的E公司。事实证明，这次收购是个灾难。清醒地看，这本是能够预料到的，但 A公司被新手的运气照花了眼睛。</p><p>在2001~2007年美国房地产繁荣期间可以观察到同样生动的例子。牙医、律师、教师和出 租车司机纷纷放弃他们的工作参与“炒”房——买房，然后再以一个更高的价格出售。最初的丰厚利润证明他们做得对，但这当然也与能力无关：房地产泡沫将每个还十分笨拙的业余 掮客捧到意想不到的高度。许多人举债来“炒”更多更大的别墅。当市场最终崩溃时，他们 债台高筑。</p><p>从哪一刻开始就不再是新手的运气，而是天才呢？没有明确的分界，但有两条线索。第 一，如果你长期比其他人成功，你可以认为，自己的才华可能起到作用，但你绝不能过于自 信、自满。第二，参与的人越多，某人出于纯粹的运气长期成功的概率就越大。也许你就是 这个某人。如果你在一个只有10名竞争者的市场上脱颖而出，这说明你有一定的才华。如果 你在一个拥有千万名竞争者的市场上成功了，你就不应该太骄傲（比如说在金融市场上）。这 种情况下你应该认为，你只是很幸运。不管怎样，请你不要急着作出判断。</p><p>个人理解：这本质是一个概率问题，我们理解事情上还是要多从概率上想想，成功的概率是多少，失败的概率是多少，从理性出发。</p><h4 id="051：认知失调"><a href="#051：认知失调" class="headerlink" title="051：认知失调"></a>051：认知失调</h4><blockquote><p>你如何撒点小谎，让自己感觉好一些</p></blockquote><p>认知失调是指打算与结果不符，事后作出别的解释。</p><p>一只狐狸偷偷地靠近一棵葡萄树，渴望地盯着树上熟得发紫的大葡萄。它拿前爪撑着树 干，伸长脖子，想摘几串葡萄，可葡萄太高了。它恼怒地想再次试试它的运气，它纵身跃 起，但扑了个空。第三回它用尽全身的力气一跳——又扑空了，它背朝下摔在地上，而葡萄 树连一片叶子都没有动一下。狐狸耸耸鼻子，说：“我觉得它们还没熟透，我不喜欢酸葡萄。”它骄傲地昂首走回了森林里。</p><p>你购买了一辆新轿车。你很快就后悔了——发动机太响、座位不舒服。怎么办？你没有将轿车退回去——不，那将是承认你犯了一个错误，你不降价汽车商很可能也不会再要它。于是你对自己说，马达响、座位不舒服，正好可以防止你开车时睡着觉 ——因此你买回了一辆特别安全的车。一点儿也不蠢，你想，你对自己的选择又感到满意了。</p><p>假设你要申请一份工作，但人家选择了另一位候选人而没选你。你不会承认是你资质不 够，而是会劝自己你其实根本不想要这份工作，你只是想再测试一下你的“市场价值”，看看人家到底还会不会请你去面试。　　</p><p>减少认知失调的方法</p><ol><li>改变认知。如果两个认知相互矛盾，我们可以改变其中一个认知，使他与另一个相一致。</li><li>增加新的认知。如果两个不一致的认知导致了失调，那么失调程度可由增加更多的协调认知来减少。</li><li>改变认知的相对重要性。因为一致和不一致的认知必须根据其重要性来加权，因此可以通过改变认知的重要性来减少失调。</li><li>改变行为。认知失调也可通过改变行为来减少，但一般情况下，行为比态度更难改变。</li></ol><p>个人理解：有很大成分是因为面子或自尊心问题，才做出其他的解释。我们丢弃面子或自尊心，提升自己的能力，改变认知。</p><h4 id="052：双曲贴现"><a href="#052：双曲贴现" class="headerlink" title="052：双曲贴现"></a>052：双曲贴现</h4><blockquote><p>及时行乐——但请只限于星期天</p></blockquote><p>双曲贴现是指一个决定离现在越近，我们的 “情感利息”就越多。</p><p>米舍尔在20世纪60年代就延迟满足做过一次著名的试验，名为“棉花糖试验”。他将一块棉花糖(甜食)放 在一群4岁的小男孩面前，让他们选择要么立即吃掉，要么，如果他们愿意等上几分钟，不吃 第一块，就会再得到一块。惊人的是，只有极少数孩子愿意等。更惊人的是，米舍尔发现， 是否拥有延迟满足的能力是他们后来事业是否成功的一个可靠的指示器。　</p><p>结论：及时行乐的诱惑力极大——尽管如此，双曲贴现也是一种思维错误。我们越能控制我们的冲动，我们就越能成功地规避这一错误。我们对我们的冲动控制越小——比如在酒精的影响下——我们就越容易犯这个错误。及时行乐是个好主意——如果每星期一次的话。 但天天享受，好像每天都是末日似的，却是不明智的。</p><p>个人理解：我们宁要相对较少的眼前，也不愿等待数额更多的日后报酬。或者说，做决策时，大部分人愿意选择短期收益，而不愿选择长期更多的收益。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;记录一下阅读该书籍的理解与感想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;026：忽视概率偏误&quot;&gt;&lt;a href=&quot;#026：忽视概率偏误&quot; class=&quot;headerlink&quot; title=&quot;026：忽视概率偏误&quot;&gt;&lt;/a&gt;026：忽视概率偏误&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;累计奖金为什么会越来越多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有两种赌博：第一种赌博你有可能赢1000万欧元，第二种赌博你可能赢1万欧元。你会参加哪一种呢？如果你在第一种赌博里赢了，你的生活将会彻底改变：你可以辞掉工作，从此靠利息生活。如果你在第二种赌博里赢了，你可以美美地前往加勒比海度假，然后一切照旧。第一种赌博赢的概率是亿分之一，第二种赌博赢的概率是万分之一。好吧，你会玩哪一 种？我们的感情冲动会将我们拉向第一种，虽然客观地看，第二种赢的概率要大无数倍。因 此累计奖金越来越多——数百万、数亿、数万亿美元——无论赢的机会是多么微弱。
　　&lt;/p&gt;
&lt;p&gt;结论：我们很难区分各种风险，除非风险为零。由于我们不能直觉地理解风险，我们必须计算。在概率公开的地方——像彩票——这就很容易。而在普通生活中，风险很难估计，但又是躲也躲不过的。&lt;/p&gt;
&lt;p&gt;个人理解：我们对生活中的概率不太敏感，以后遇到有事情要多思考概率的大小，以便做出合理的判断。&lt;/p&gt;</summary>
    
    
    
    
    <category term="book" scheme="http://tungsing.cc/tags/book/"/>
    
    <category term="思考" scheme="http://tungsing.cc/tags/%E6%80%9D%E8%80%83/"/>
    
    <category term="逻辑" scheme="http://tungsing.cc/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>清醒思考的艺术阅读笔记</title>
    <link href="http://tungsing.cc/2021/12/05/book/the_art_of_thinking_clearly/chapter_one/"/>
    <id>http://tungsing.cc/2021/12/05/book/the_art_of_thinking_clearly/chapter_one/</id>
    <published>2021-12-05T02:18:26.092Z</published>
    <updated>2022-01-11T09:10:17.736Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>记录一下阅读该书籍的理解与感想。</p></blockquote><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>该书是通过通过 52 个简短的小文章深入浅出地讲解了一些常见的思维陷阱。使人们犯错更少，离成功更近。</p><h4 id="001：幸存偏误"><a href="#001：幸存偏误" class="headerlink" title="001：幸存偏误"></a>001：幸存偏误</h4><blockquote><p>为什么你该去逛逛墓地</p></blockquote><p>幸存偏误是指：由于日常生活中更容易看到成功、看不到失败、你会系统性的高估成功的希望。不了解现实的你对成功抱有一种幻想，认识不到成功的概率有多微弱。</p><p>幸存偏误意味着：你系统性地高估了成功概率。</p><p>解决办法：尽可能常去逛逛曾经大有希望的项目、投资和事业的墓地。这样的散步虽然伤感，但对你是有好处的。</p><p>个人理解：做事情或者项目前不仅仅要关注成功的案例也要多收集和研究失败的案例，对全部案例分析后再决定要不要做，避免陷入幸存偏误中。</p><span id="more"></span><h4 id="002：游泳选手身材错觉"><a href="#002：游泳选手身材错觉" class="headerlink" title="002：游泳选手身材错觉"></a>002：游泳选手身材错觉</h4><blockquote><p>哈佛是好大学还是烂大学？我们不清楚</p></blockquote><p>职业游泳者体形完美，并不是因为他们锻炼充分。实际情况正好相反：他们之所以成为出色的游泳选手，是因为他们拥有这样的身材。他们的身躯是一种选择标准，而不是他们运动的结果。一旦我们混淆选择标准和结果，我们就会产生游泳选手身材错觉。</p><p>结论：凡有人讴歌某种东西值得追求——强健肌肉、美貌、高收入、长寿、影响力、快乐，你都要看仔细。在跨入泳池之前，不妨先照照镜子。你要诚实地对待自己。</p><p>个人理解：是个因果关系分析的问题，比如一个厉害的团队并不是因为团队领导多厉害，而是团队本身是具备明确的目标、良好的沟通、共同的价值观和行为规范、不同的角色、每个团队成员都有归属感、资源可以共享和互通有无的标准团队。</p><h4 id="003：过度自信效应"><a href="#003：过度自信效应" class="headerlink" title="003：过度自信效应"></a>003：过度自信效应</h4><blockquote><p>你为什么会系统性地高估自己的学识和能力</p></blockquote><p>我们总是系统性地高估我们的学识和预测能力——而且高估得很厉害。对于过度自信效应，重要的不是单个估计是否正确。过度自信会令你忽视你真正知道的东西与你已知的东西之间的区别。</p><p>有两个效应在共同起作用。一个是传统的过度自信，另一个是项目的直接利益人在激励下低估成本。调研员希望拿到系列订单，建筑企业和供应商亦然，建筑业主感觉得到了乐观数据的支持，政治家们靠这样做拉选票。我们会在另一章简述这种激励过敏倾向。重要的区别在于：过度自信不是受到了激励，而是自然单纯、生而有之的。</p><p>结论：请对所有预测持怀疑态度，尤其是当这些预测是由所谓的专家们作出的。请你在筹划任何事情时都从悲观的角度出发，作最坏的打算。这样你才会真正有机会，更现实一些地判断形势。</p><p>个人理解：</p><h4 id="004：从众心里"><a href="#004：从众心里" class="headerlink" title="004：从众心里"></a>004：从众心里</h4><blockquote><p>就算有数百万人声称某件蠢事是对的，这件蠢事也不会因此成为聪明之举</p></blockquote><p>从众心理（有时被含糊地称为随大溜）是指：只要别人做什么我也跟着做什么，我的行为就是正确的。换言之，越多的人认为一个想法正确，这个想法就更加正确——这当然是荒谬的。</p><p>比如：喜剧和访谈节目常会利用从众心理，在关键位置插入笑声，事实证明这会引得观众发笑。</p><p>个人理解：出现从众的情况下，多思考下为什么，是否值的做。</p><h4 id="005：纠缠于沉默成本"><a href="#005：纠缠于沉默成本" class="headerlink" title="005：纠缠于沉默成本"></a>005：纠缠于沉默成本</h4><blockquote><p>你为什么应该忽视过去</p></blockquote><p>每个决定，不管是私人的还是业务上的，始终是在不确定的情况下作出的。我们的设想，有可能兑现，也有可能落空。任何时候我们都可能离开选取的小道，并承担后果，比如中断项目。这种不确定情形下的权衡是理性行为。然而，在我们已经投入特别多的时间、金钱、能量、爱等因素之后，沉没成本令人难以放手、难以释怀。于是已经投资的钱就成了继续做下去的理由，即使客观来看坚持下去毫无意义。投资越多，沉没成本就越大，将项目继续做下去的理由就越充分。</p><p>股市投资人经常成为沉没成本的受害者。他们在决定是否出售股票时常以买入价作为参照。当股价高于买入价时，就卖掉股票；如果股价低于买入价，就抱住不卖。这是不理智的，绝不可以让买入价处处扮演角色。唯一有效的是股市未来的前景（和可选投资未来的行情）。每个人都会出错，特别是在股市里。纠缠于沉没成本的不幸，其关键就是：你投资一只股票亏的钱越多，你越是抱紧它不放。</p><p>结论：理性的决定意味着忽视已经投入的成本。你已经投资了什么并不重要，唯一重要的是现在的形势及你对未来的评估。</p><p>个人理解：就现在的形势来评估未来的行动，而不要把发生过的内容作为参考。</p><h4 id="006：互惠偏误"><a href="#006：互惠偏误" class="headerlink" title="006：互惠偏误"></a>006：互惠偏误</h4><blockquote><p>你为什么不该让别人请你喝饮料</p></blockquote><p>互惠古来有之。它的基本含义是：“我帮你，你帮我。”我们发现那些食物总量变化很大的动物之间都存在互惠。假定你是猎人，有一天运气好，猎杀了一头鹿。肉很多，你一天吃不完。当时还没有冰箱，于是你就与你的群体成员瓜分了这头鹿。这样，当你有一天运气不好时，你也可以从别人的猎物中获得好处。这是一种出色的生存策略。互惠是风险管理；没有互惠，人类——还有无数种动物——早就灭绝了。</p><p>互惠也有可恶的一面：报复。紧接着报复的是反报复，然后你就会陷入一种恶性循环中。耶稣曾经布道，要求将另一面脸也伸给攻击者，也就是打断恶性循环，但这是很难做到的，因为互惠这一理念已经在我们脑中顽固地存在了一亿多年。</p><p>个人理解：当情况是陷入互惠的可恶的一面是，要及时打破它</p><h4 id="007：确认偏误"><a href="#007：确认偏误" class="headerlink" title="007：确认偏误"></a>007：确认偏误</h4><blockquote><p>遇到“特殊情况”这个词，你要格外小心</p><p>干掉你的宠儿</p></blockquote><p>确认偏误是所有思维错误之父——它倾向于这样诠释新信息，让它们与我们现有的理论、世界观和信念相兼容。换句话说：我们过滤掉与我们的现有观点相矛盾（因此被称作反驳证据，不过它缺少合适的德语表达）的新信息。</p><p>结论：请你与确认偏误作斗争。请你写下你的信条——有关世界观、投资、婚姻、健康预防措施、节食、成功策略的，然后寻找反驳证据。干掉自己最心爱的理论，这是一桩艰苦的工作，但作为聪明人士，你不会躲避的。</p><p>个人理解：我们要有意识的锻炼自己去寻找反驳证据，尤其是听到”特殊情况“这个词，更要思考它背后隐藏的反驳证据。</p><h4 id="009：权威偏误"><a href="#009：权威偏误" class="headerlink" title="009：权威偏误"></a>009：权威偏误</h4><blockquote><p>你为什么该藐视权威</p></blockquote><p>关于权威有两个问题。首先是令人警醒的跟踪记录。这个星球上有大约100万受过培训的经济学家，没有一位精确预言了金融危机发生的时间，更别说房地产泡沫的破裂、信用违约互换的瓦解直到通货膨胀引发的经济危机的顺序了。再没有哪个专家群体失灵得比这更惊人了。</p><p>其次，经常可以证明，权威也会出错。出错是人类的通病，但重要的是，面对权威我们会将独立思考调低一级。面对专家意见时我们往往会比面对其他意见粗心许多。还有，我们会服从权威，哪怕是在理性或道德上毫无意义的地方。这就是权威偏误。</p><p>结论：不管什么时候遇到一位专家，我都会设法向他挑战。请你也这么做。你对权威的批判性越强，你就越自由，就越相信自己有更多的能力。</p><p>个人理解：自己要有独立思考的能力，这样才不会受束于别人。</p><h4 id="010：对比效应"><a href="#010：对比效应" class="headerlink" title="010：对比效应"></a>010：对比效应</h4><blockquote><p>你为什么最好别找模特儿等级的朋友一起出门</p></blockquote><p>当我们同时面对某种难看、便宜、小的东西时，我们就会判断出另一种东西更漂亮、更贵、更大。我们很难作出绝对的判断。对比效应是常见的思维错误之一。</p><p>你在学生时代可能做过以下实验：你拿来两只桶，在第一只桶里倒进温水，在第二只桶里倒进冰水。你先将右手插进冰水里一分钟，然后将两只手同时插进温水里。你有什么感觉？左手感觉水是温的，右手却感觉水是烫的。</p><p>没有对比效应，就完全无法想象打折生意。一种从100欧元降到70欧元的产品，会显得比一直就卖70欧元的产品更便宜。而事实上最初的价格根本无关紧要。不久前一位投资者对我说：“这只股票便宜，因为它只有最高价的50%。”我轻轻摇摇头。股票价格永远不会“低”或“高”。它是怎么样就是怎么样，唯一值得考虑的是它从这一刻起是会涨还是会跌。</p><p>个人理解：我们要警惕对比效应的陷阱，也要合理的利用对比效应，比如打折。</p><h4 id="011：现成偏误"><a href="#011：现成偏误" class="headerlink" title="011：现成偏误"></a>011：现成偏误</h4><blockquote><p>你为什么宁可用一张错误的地图，也不愿没有地图</p></blockquote><p>现成偏误是指：我们依据现成的例子来想象世界。这当然是愚蠢的，因为外界现实中的某种东西不会因为我们更容易想到而出现得更频繁。</p><p>我们的大脑是剧本式思维的，而不是量化思维的。</p><p>人们都是先使用现成的数据或配方。他们在这个基础上作决定——结果经常是灾难性的。例如：10年前人们就知道，用所谓的期权定价模型公式确定衍生金融产品的价格是行不通的。但没有别的公式。因此人们聊胜于无，宁可使用一个错误公式。“波动率”也一样。用它测量一种金融产品的风险是错误的，但它是现成的。于是现成偏误给银行造成了巨额损失。这就好像你身在一座没有地图的陌生城市里，但你口袋里有另一座城市的地图，于是你就使用了那张地图。你宁可用一张错误的地图，也不愿没有地图。</p><p>应对办法：请与跟你想法不同的人合作，跟那些与你拥有截然不同经验的人合作。因为你独自战胜不了现成偏误。</p><p>个人理解：做事情要通过量化和群体决策来完成，这样才有可能避免陷入现成偏误的陷阱。</p><h4 id="012：“在好转之前会先恶化”的陷阱"><a href="#012：“在好转之前会先恶化”的陷阱" class="headerlink" title="012：“在好转之前会先恶化”的陷阱"></a>012：“在好转之前会先恶化”的陷阱</h4><blockquote><p>如果有人建议你选择一条“先经历痛苦的道路”，你应该敲响警钟</p></blockquote><p>“在好转之前会先恶化”的陷阱是确认偏误的一种变体。使用这个花招大大有利于一个对专业一窍不通或对事情没有把握的专业人员。如果情况继续走下坡路，就证明了他的预言是正确的。如果情况意外地回升了，客户开心，专业人员则可以将好转归功于他的能力。不管怎样——他总是对的。</p><p>结论：如果有人说：“在好转之前会先恶化”，你脑子里就应该敲响警钟。不过请小心：确实有那样的情形，先是再次下滑然后回升。事业的转换可能会耗费时间，会造成停发工资。一个企业的重组也需要一定的时间。但所有这些情况，人们很快就能看出措施是否有效。里程碑是明确的，是可以检测的。请你望着里程碑，而不是望着天空。</p><p>个人理解：遇到例如：将有“艰难的几年”，要求你的同胞们“勒紧裤腰带”；许诺等“清洗”、“除渣”、“改组”的“棘手阶段”结束后形势就会好转等情况要仔细思考、求证、检测、观察是不是如所说的一致。</p><h4 id="013：故事偏误"><a href="#013：故事偏误" class="headerlink" title="013：故事偏误"></a>013：故事偏误</h4><blockquote><p>为什么就连真实的故事也是骗局</p></blockquote><p>故事偏误是指：用故事扭曲和简化现实，它们排斥不合适编进故事的一切。</p><p>结论：从自传到世界大事——我们将一切炮制成有“意义”的故事。我们这样做是在扭曲真相——这会影响我们决定的质量。</p><p>应对方法：请你将这些故事拆解开来。请你问问自己：这些故事想隐藏什么？</p><p>训练方法：请你设法用无关联的眼光看看自己的生平，你会吃惊的。</p><p>个人理解：我们要用科学的思维来分析和理解故事的背后的真实情况。</p><h4 id="014：事后诸葛亮偏误"><a href="#014：事后诸葛亮偏误" class="headerlink" title="014：事后诸葛亮偏误"></a>014：事后诸葛亮偏误</h4><blockquote><p>你为什么应该写日记</p></blockquote><p>事后诸葛亮偏误绝对是最顽固的思维错误之一，可以恰如其分地称为“我早知道现象”，即事后回顾时一切都显得是可以理解的、不可避免的。</p><p>事后诸葛亮偏误为什么这么危险呢？因为它让我们相信自己是很好的预言家，而事实却不是这样。这会导致我们傲慢，误导我们作出错误的决定。在私事上也是如此。</p><p>建议：与事后诸葛亮偏误作斗争并不容易。研究表明，知道这种偏误的人，也常像其他所有人一样掉进它的陷阱。但我还有一个建议，这建议更多是来自个人经验而不是科学：请你记日记。请你写下你的预测——有关政治、事业、体重、股市等。请你不时地拿你的记载与实际情况相比较。</p><p>个人理解：生活充满了不可预见性，把握当下，迎接未来。</p><h4 id="015：司机的知识"><a href="#015：司机的知识" class="headerlink" title="015：司机的知识"></a>015：司机的知识</h4><blockquote><p>你为什么不可以把新闻播音员说的话当真</p></blockquote><p>查理·芒格是全球最优秀的投资家之一，普朗克的故事我就是从他那里听来的。他认为知识有两种：一种是真知识，来自那些投入大量时间和思考以获得知识的人们；另一种就是司机的知识，按芒格故事里的意思，司机是指那些装得好像他们知道的人。他们会模仿别人表演，他们也可能拥有动听的声音或具有说服力的形象。但他们传播的知识是空洞的，他们高谈阔论地挥霍着华丽词汇。</p><p>结论：请你不要信任司机的知识。请你不要将公司新闻发言人、爱出风头的人、新闻播音员、唠叨鬼、花言巧语者、爱说闲话的人与一个真正有知识的人搞混。你怎么能区分出来呢？<strong>这里有个明确的信号。真正有知识的人知道他们知道什么，也知道他们不知道什么。这类人一旦来到他的“能力范围”之外，他要么什么也不说，要么就说“我不知道”。他这么说时不会觉得难为情，甚至还会带着一定的骄傲。</strong> 而从“司机们”那儿，你别的什么话都能听到，就是听不到这一句。</p><p>个人理解：警惕司机们，不要为不在自己能力范围内的事情说不知道而感觉不好意思或难为情。但也要不断的扩大自己的能力范围。</p><h4 id="016：控制错觉"><a href="#016：控制错觉" class="headerlink" title="016：控制错觉"></a>016：控制错觉</h4><blockquote><p>你实际控制的少于你以为的</p></blockquote><p>控制错觉是指：相信我们能够控制或影响某种我们客观上无法控制或影响的东西的倾向。这是詹金斯和沃德两位研究人员在1965年发现的。试验规则很简单：两只开关和一盏灯，灯或开或关。詹金斯和沃德可以调节开关和灯光互相制约的强度。即使是在灯纯属偶然地开、关的情况下，受试者也坚信，按开关能够在某种程度上影响灯。</p><p>案例：一位美国科学家将人们关在一间音响室里，不断提高音量，直到受试者表示拒绝，以此调查人们对噪音的疼痛承受程度。有两间音响室，A音响室和B音响室，它们一模一样，只有一个区别：B音响室的墙上有个红色的紧急按钮。结果呢？B音响室里的人们承受的噪音明显要大得多。可笑的是，那个紧急按钮根本不管用。错觉本身足够提高人们承受疼痛的极限。</p><p>结论：请你将注意力集中于你真正能影响的少量东西——坚定不移地只关注其中最重要的那些。其他的，听之任之吧。</p><p>个人理解：我们能控制的东西很少，我们要把有限的精力投入到自己真正喜欢、感兴趣的事情上。其他的管它呢！</p><h4 id="017：激励过敏倾向"><a href="#017：激励过敏倾向" class="headerlink" title="017：激励过敏倾向"></a>017：激励过敏倾向</h4><blockquote><p>你为什么不该按实际开销付钱给你的律师</p></blockquote><p>激励过敏倾向的例子：1947年，当死海的卷轴被发现时，考古学家们悬赏收集每一张新发现的羊皮纸手稿。结果，为了增加手稿数量，那些羊皮纸被撕碎了。同样的事也发生在19世纪的中国，当悬赏征购恐龙骨时，农民们会将挖出的完好恐龙骨砸碎，再去领赏；按实际开销付钱给律师、建筑师、咨询师、会计师或驾校老师是愚蠢的。这些人受到激励，就会尽可能多花钱。因此请你事先约定一个固定价格。</p><p>正相激励的例子：在古罗马，当一座桥竣工通行时，工程师必须站在桥拱下。这种机制相当好，会鞭策工程师将桥建得足够稳固。好的激励机制会将目的和激励联系起来。</p><p>结论：请小心激励过敏倾向。如果你对某个人或某个组织的行为感到吃惊，请你想想，那后面隐藏着什么激励机制。我保证，你可以这样解释90%的行为。激情、精神疾病、心理障碍或恶意最多占到10%。</p><p>个人理解：如果要制定激励机制，一定要和事情的目的联系起来；生活中理解一件事情，可以想想背后有没有激励机制。</p><h4 id="018：回归均值"><a href="#018：回归均值" class="headerlink" title="018：回归均值"></a>018：回归均值</h4><blockquote><p>医生、顾问、教练及心理治疗师的作用令人怀疑</p></blockquote><p>假定你正在经历一次破纪录的严寒，接下来的几天气温就极有可能回升——朝着月度均值的方向。每逢酷暑、干旱和雨季时也是这样，气候会围绕一个均值波动。这同样适用于慢性疼痛、高尔夫球成绩、股市业绩、恋爱运气、主观舒适感、职场成功、考试分数等。总之，剧烈的背痛很有可能不用找心理治疗师也会减弱；高尔夫球成绩不用额外上课也会重新变好；那位投资顾问的表现不用跳“雨舞”也会移向均值。</p><p>结论：当你听到诸如“我病了，去看医生 ，现在我好了，因此是那位医生帮助了我”或“这一年公司业绩很糟糕，我们请了个顾问回来，现在业绩恢复正常了”的话时，很有可能就是回归均值在起作用。</p><p>个人理解：事情或者生活就是起起落落的，我们要以平常心来对待</p><h4 id="019：公地悲剧"><a href="#019：公地悲剧" class="headerlink" title="019：公地悲剧"></a>019：公地悲剧</h4><blockquote><p>为什么理性的人不去诉诸理性</p></blockquote><p>请你设想有一块肥沃的土地，一座村庄的所有农民均可使用。可以预料，每个农民都会将尽量多的奶牛赶到这块土地上去放牧。只要没有人偷猎、没有疾病蔓延，这件事就行得通，简言之：只要奶牛总数不超过一定数量，也就是土地不被剥削殆尽即可。可是，一旦事情不是这样，公地的美丽想法就会突转为悲剧。作为理性的人，每个农民都试图将他的利润最大化。他心想：“我要是再多将一头奶牛赶去公地，我会得到什么好处呢？”他可以得到多出售一头奶牛的额外好处。多一头奶牛造成的过度放牧的害处由所有人承担，单个农民承担的损失极小。所以从他的角度看，将更多的奶牛赶到公地上去放牧是理性的。于是再来一头、再来一头，直至公地被毁掉，这就是公地悲剧。</p><p>结论：只有两种解决方法：将公地私有化或加强管理。对于无法私有化的东西，如臭氧层、海洋、卫星运行轨道等，必须加强管理。</p><p>个人理解：公共的东西必须加强管理</p><h4 id="020：结果偏误"><a href="#020：结果偏误" class="headerlink" title="020：结果偏误"></a>020：结果偏误</h4><blockquote><p>切勿以结果判断决定</p></blockquote><p>结果偏误又叫作史学家错误。我们倾向于以结果判断决定，而不是当时作决定的过程。过程是重要的，由于作决定的过程会被不少的因素所左右。</p><p>结论：请你勿以结果判断决定。结果差并不必定意味着当时所做的决定不对，反之亦然。你最好仔细研究一下当时作这样决定的缘由，而不是吐槽一个被证实是错误地决定，或者为一个也许是纯属偶然的得到成功的决定而感到庆幸。这个决定是出于理性而做出的吗？若是是，恭喜你，那你下回最好仍然这样作，哪怕上一回的结果十分的糟糕。</p><p>个人理解：看淡结果，注重过程的思考。</p><h4 id="021：选择的悖论"><a href="#021：选择的悖论" class="headerlink" title="021：选择的悖论"></a>021：选择的悖论</h4><blockquote><p>为什么更多反而是更少</p></blockquote><p>选择多是进步的标尺。有所选择令人幸福。但这也有一个‘‘度”，过多的选择会降低生活质量。专业术语称 之为选择的悖论</p><p>美国心理学家巴里 施瓦茨在他的《不满指南》一书里说明了为什么会这样。原因有三：</p><p>第一，选择范围太大会导致无所适从。</p><p>第二，选择范围大会导致作出更差的决定。</p><p>第三，选择范围大会导致不满。</p><p>怎么办：请你在端详面前的选项之前，仔细考虑你想要什么。请你写下你的标准，并务 必遵守它们。你要明白，你永远作不出完美的选择。要想作出在事后看来无懈可击的选择是 非理性的，因为事情的发展永远有无数种可能性。你就满足于一个适合你的“好答案”吧。 是的，在生活伴侣这件事上也是如此。只有最好的才适合你吗？在存在无限选择的年代，情况恰恰相反：适合你的才是最好的。</p><p>个人理解：做选择的时候就基于当前的情况和目标，选择一个适合自己的即可。</p><h4 id="022：讨喜偏误"><a href="#022：讨喜偏误" class="headerlink" title="022：讨喜偏误"></a>022：讨喜偏误</h4><blockquote><p>你行为不理性，是因为你想讨别人喜欢</p></blockquote><p>讨喜偏误是指：某人越讨喜，我们就越倾向于从这个人那儿买东西或者帮助他。</p><p>讨喜是指：我们会觉得一个人讨喜，如果他：（1)外表有吸引力；（2)在出身、个性和兴趣上与我们相似；（3)他觉得我们讨人喜欢。这三个因素是依次排列的。</p><p>结论：你在判断一笔生意时应该坚持不受卖方影响。请你不要考虑他，更好的办法是： 请你想象他是个不讨人喜欢的家伙。</p><p>个人理解：在卖买的时候要记得想一下讨喜偏误。买的时候要主要销售人员是否利用了讨喜偏误；卖的时候我们也要善于利用讨喜偏误。</p><h4 id="023：禀赋效应"><a href="#023：禀赋效应" class="headerlink" title="023：禀赋效应"></a>023：禀赋效应</h4><blockquote><p>请不要死抱着某种东西不放</p></blockquote><p>禀赋效应是：我们感觉我们拥有的东西比我们没有拥有的更有价值。换句话说：当我们出售某物时，我们要求的钱多于我们自己愿意为它支付的钱。</p><p>让我们放弃要比让我们囤积难得多。这不仅解释了为什么我们会在房子里堆满废物，也说明了为什么邮票、手表或艺术品的爱好者很少将他们的收藏拿出来交换或出售。</p><p>你应聘一份工作却没有成功，你会很失望。如果你知道，你直坚持到了最终环节，然后被拒绝了，你的失望还要大得多—这是没有道理的。因为你要么成功，要么不成功，其他的切都无关紧要。</p><p>结论：请不要死抱着某种东西不放，请将你拥有的视作“宇宙”临时留给你的某种东西。要知道你拥有的一切随时又会被拿走。</p><p>个人理解：我们要理性的对待我们所拥有的物品，不要赋予它情感价值。</p><h4 id="024：奇迹"><a href="#024：奇迹" class="headerlink" title="024：奇迹"></a>024：奇迹</h4><blockquote><p>不可能事件的必然性</p></blockquote><p>1950年5月1日，内布拉斯加州的比特丽丝教堂唱诗班的15名成员原定于傍晚7点15分集 合排练，出于不同的原因他们全都迟到了。牧师一家迟到是因为妻子还得熨烫女儿的衣服； 一对夫妻不准时，是因为他们汽车的发动机启动不了；琴师本想早到半小时，可他晚饭后睡 着了……当天晚上7点25分教堂爆炸了，爆炸声全村都能听到。墙壁被炸飞了，屋顶当场坍塌 了。但爆炸时无人遇难，这真是一个奇迹。消防队队长认为爆炸是由煤气泄漏引起的，而唱 诗班的成员们坚信他们接收到了 一个上帝的信号。这到底是上帝之手还是巧合呢？</p><p>这种故事发生的可能性有多大呢？瑞士心理学家荣格认为，这是一种未知力量的作用， 他称之为同步性。一个思维清晰的人会如何对待这种故事呢？他会拿起一张纸和一支笔。我们就以教堂的爆炸为例吧。请你画出4个格子，填入4种可能的情况。第一格是已经发生的事 实：“唱诗班迟到，教堂爆炸。”但还有其他3种可能性：“唱诗班迟到，教堂不爆炸”、 “唱诗班不迟到，教堂爆炸”、“唱诗班不迟到，教堂不爆炸”。请你估计每种情况发生的概率，并依次填入相应的格子里。你可以看出，光是最后一种情况发生的概率就很大：每天，在数百万座教堂里，都有一个唱诗班在约定的时间排练，而教堂没有爆炸。教堂爆炸的 故事顿时就没有那么不可思议了。相反，如果数百万座教堂在一个世纪里都没有爆炸过，这 倒是不可思议的。因此这件事跟上帝之手无关。</p><p>结论：不可思议的意外事件就是虽然少见但完全可能发生的事件。它们的发生没什么可吃惊的，如果它们从不发生，那才令人感到意外。</p><p>个人理解：遇到不可思议的事情，可以从概率上分析背后的逻辑，做到理性思考。</p><h4 id="025：团体迷思"><a href="#025：团体迷思" class="headerlink" title="025：团体迷思"></a>025：团体迷思</h4><blockquote><p>共识为什么有可能是危险的</p></blockquote><p>团体迷思是从众心理的一种特殊情况。你曾经在某次会议上克制自己，没有说出你的意见吗？肯定有过。你一言不发，点头同意种种动议，毕竟你不想做个(永远的）“捣蛋鬼”。另外你对你的异议也许也没有把握，其他人也不傻啊，他们全都意见一致，那就不吭声吧。如果人人都这样做，就会出现团体迷思。</p><p>结论：如果你是一个智囊团的成员，无论何时，你都要讲出你的看法——哪怕这看法不 是很中听。你要仔细考虑没有讲出的意见，必要时要甘冒被隔离在温暖团体之外的风险。如果你领导着一支团队，请你指定某人唱反调。他将不是团队里最受欢迎的人，但也许是最重要的人。</p><p>个人理解：如果是团队成员的话，要根据实际情况发表自己不同的看法。如果是团队的领导就要多思考和分析那个唱反调说的是否是有道理的，并要鼓励他。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;记录一下阅读该书籍的理解与感想。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;该书是通过通过 52 个简短的小文章深入浅出地讲解了一些常见的思维陷阱。使人们犯错更少，离成功更近。&lt;/p&gt;
&lt;h4 id=&quot;001：幸存偏误&quot;&gt;&lt;a href=&quot;#001：幸存偏误&quot; class=&quot;headerlink&quot; title=&quot;001：幸存偏误&quot;&gt;&lt;/a&gt;001：幸存偏误&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;为什么你该去逛逛墓地&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幸存偏误是指：由于日常生活中更容易看到成功、看不到失败、你会系统性的高估成功的希望。不了解现实的你对成功抱有一种幻想，认识不到成功的概率有多微弱。&lt;/p&gt;
&lt;p&gt;幸存偏误意味着：你系统性地高估了成功概率。&lt;/p&gt;
&lt;p&gt;解决办法：尽可能常去逛逛曾经大有希望的项目、投资和事业的墓地。这样的散步虽然伤感，但对你是有好处的。&lt;/p&gt;
&lt;p&gt;个人理解：做事情或者项目前不仅仅要关注成功的案例也要多收集和研究失败的案例，对全部案例分析后再决定要不要做，避免陷入幸存偏误中。&lt;/p&gt;</summary>
    
    
    
    
    <category term="book" scheme="http://tungsing.cc/tags/book/"/>
    
    <category term="思考" scheme="http://tungsing.cc/tags/%E6%80%9D%E8%80%83/"/>
    
    <category term="逻辑" scheme="http://tungsing.cc/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>开发管理系统脚手架</title>
    <link href="http://tungsing.cc/2020/05/26/framework/scaffold/"/>
    <id>http://tungsing.cc/2020/05/26/framework/scaffold/</id>
    <published>2020-05-26T07:53:42.247Z</published>
    <updated>2020-05-28T01:14:03.289Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>为了方便快速开发管理系统和练习技术，开发了一套前后端分离的脚手架项目</p></blockquote><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><p>前端</p><table><thead><tr><th>技术</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>node</td><td>10.0 +</td><td>LTS版本</td></tr><tr><td>npm</td><td>6.0 +</td><td></td></tr><tr><td>vue</td><td>2.6+</td><td></td></tr><tr><td>vue-cli</td><td>3.6</td><td></td></tr><tr><td>element-ui</td><td>2.7+</td><td></td></tr><tr><td>vue-element-template</td><td></td><td>开源基础模板</td></tr></tbody></table><p>后端</p><table><thead><tr><th>技术</th><th>版本</th><th>描述</th></tr></thead><tbody><tr><td>jdk</td><td>8+</td><td></td></tr><tr><td>maven</td><td>3.5 +</td><td></td></tr><tr><td>spring boot</td><td>2.1.4.RELEASE</td><td></td></tr><tr><td>mybatis plus</td><td>3.3.0</td><td></td></tr><tr><td>easyexcel</td><td>2.1.7</td><td></td></tr><tr><td>mysql</td><td>8+</td><td>数据库</td></tr></tbody></table><span id="more"></span><h4 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h4><p>前端  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">├── build                      // 构建相关</span><br><span class="line">├── mock                       // 项目mock 模拟数据</span><br><span class="line">├── config                     // 配置相关</span><br><span class="line">├── public                     // 静态资源</span><br><span class="line">│   │── favicon.ico            // favicon图标</span><br><span class="line">│   └── index.html             // html模板</span><br><span class="line">├── src                        // 源代码</span><br><span class="line">│   ├── api                    // 所有请求</span><br><span class="line">│   ├── assets                 // 主题 字体等静态资源</span><br><span class="line">│   ├── components             // 全局公用组件</span><br><span class="line">│   ├── directive              // 全局指令</span><br><span class="line">│   ├── filters                // 全局 filter</span><br><span class="line">│   ├── icons                  // 项目所有 svg icons</span><br><span class="line">│   ├── lang                   // 国际化 language</span><br><span class="line">│   ├── layout                 // 全局 layout</span><br><span class="line">│   ├── router                 // 路由</span><br><span class="line">│   ├── store                  // 全局 store管理</span><br><span class="line">│   ├── styles                 // 全局样式</span><br><span class="line">│   ├── utils                  // 全局公用方法</span><br><span class="line">│   ├── vendor                 // 公用vendor</span><br><span class="line">│   ├── views                  // views 所有页面</span><br><span class="line">│   ├── App.vue                // 入口页面</span><br><span class="line">│   ├── main.js                // 入口文件 加载组件 初始化等</span><br><span class="line">│   └── permission.js          // 权限管理</span><br><span class="line">├── tests                      // 测试</span><br><span class="line">├── .env.xxx                   // 环境变量配置</span><br><span class="line">├── .eslintrc.js               // eslint 配置项</span><br><span class="line">├── .babelrc                   // babel-loader 配置</span><br><span class="line">├── .travis.yml                // 自动化CI配置</span><br><span class="line">├── vue.config.js              // vue-cli 配置</span><br><span class="line">├── postcss.config.js          // postcss 配置</span><br><span class="line">└── package.json               // package.json</span><br></pre></td></tr></table></figure><p>后端  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── grass-parent                      // 父工程</span><br><span class="line">├── grass-core                        // 核心工程</span><br><span class="line">│   ├── common                        // 公共代码包</span><br><span class="line">│   ├── config                        // 配置代码包</span><br><span class="line">│   ├── utils                         // 公共工具包</span><br><span class="line">│   └── GrassApplicationRunner.java   // 核心启动类</span><br><span class="line">├── grass-autoconfigure               // 自动配置工程</span><br><span class="line">├── grass-starter                     // starter工程，供其他工程依赖</span><br><span class="line">├── ecm                               // 依赖核心工程的标准spring boot工程</span><br><span class="line">│   ├── operation                     // 运维相关功能</span><br><span class="line">│   ├── system                        // 系统管理功能</span><br><span class="line">└── └── ECMSpringBootApplication.java // 工程启动类</span><br></pre></td></tr></table></figure><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>展示几张效果图，有时间搭建一个演示环境</p><p>首页<br><img src="/images/framework/home.png"></p><p>组织机构管理<br><img src="/images/framework/org.png"></p><p>运维日志管理<br><img src="/images/framework/login.png"></p><p>前端封装组件的例子<br><img src="/images/framework/example.png"></p><p>后端工程<br><img src="/images/framework/admin.png"></p><h4 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h4><p>前端</p><ol><li>前端支持容器化</li><li>支持Tab方式</li></ol><p>后端</p><ol><li>集成到之前搭建的Spirng cloud 环境中</li></ol><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>关于工程前缀“grass”来源，本来是打算用“芨芨草”英文来做工程前缀的，但它（Achnatherum splendens (Trin. ) Nevski ）的英文名称太长，不太适合。故取通用的“grass”作为工程前缀。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;为了方便快速开发管理系统和练习技术，开发了一套前后端分离的脚手架项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;技术栈&quot;&gt;&lt;a href=&quot;#技术栈&quot; class=&quot;headerlink&quot; title=&quot;技术栈&quot;&gt;&lt;/a&gt;技术栈&lt;/h4&gt;&lt;p&gt;前端&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;node&lt;/td&gt;
&lt;td&gt;10.0 +&lt;/td&gt;
&lt;td&gt;LTS版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;npm&lt;/td&gt;
&lt;td&gt;6.0 +&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vue&lt;/td&gt;
&lt;td&gt;2.6+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vue-cli&lt;/td&gt;
&lt;td&gt;3.6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element-ui&lt;/td&gt;
&lt;td&gt;2.7+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vue-element-template&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;开源基础模板&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;后端&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;jdk&lt;/td&gt;
&lt;td&gt;8+&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;maven&lt;/td&gt;
&lt;td&gt;3.5 +&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;spring boot&lt;/td&gt;
&lt;td&gt;2.1.4.RELEASE&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mybatis plus&lt;/td&gt;
&lt;td&gt;3.3.0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;easyexcel&lt;/td&gt;
&lt;td&gt;2.1.7&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mysql&lt;/td&gt;
&lt;td&gt;8+&lt;/td&gt;
&lt;td&gt;数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="jave" scheme="http://tungsing.cc/categories/jave/"/>
    
    <category term="web" scheme="http://tungsing.cc/categories/jave/web/"/>
    
    <category term="framework" scheme="http://tungsing.cc/categories/jave/web/framework/"/>
    
    
    <category term="java" scheme="http://tungsing.cc/tags/java/"/>
    
    <category term="vue" scheme="http://tungsing.cc/tags/vue/"/>
    
    <category term="spring boot" scheme="http://tungsing.cc/tags/spring-boot/"/>
    
    <category term="framework" scheme="http://tungsing.cc/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>常见限流算法</title>
    <link href="http://tungsing.cc/2020/01/19/java/limiter/"/>
    <id>http://tungsing.cc/2020/01/19/java/limiter/</id>
    <published>2020-01-19T06:59:57.571Z</published>
    <updated>2020-01-19T09:29:22.768Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>工作中遇到了限制请求数的场景，学习和记录一下解决办法。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在开发高并发系统时有三把利器用来保护系统：<strong>缓存</strong>、<strong>降级</strong>和<strong>限流</strong><br><strong>缓存</strong>:缓存的目的是提升系统访问速度和增大系统处理容量<br><strong>降级</strong>:降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行<br><strong>限流</strong>:限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理  </p><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><p>常见的限流算法有计数器、令牌桶和漏桶算法</p><span id="more"></span><h4 id="计算器算法"><a href="#计算器算法" class="headerlink" title="计算器算法"></a>计算器算法</h4><p>计数器算法是限流算法里最简单也是最容易实现的一种算法<br>示例1：用AomicInteger来记录并发数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountRateLimiter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count.get() &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请求用户过多，请稍后在试！&quot;</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count.incrementAndGet();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 处理核心逻辑</span></span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;--&quot;</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                count.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：使用信号量来控制并发的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountRateLimiterSmp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            semaphore.acquire();</span><br><span class="line">            <span class="comment">// 处理核心逻辑</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;--&quot;</span> + System.currentTimeMillis() / <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            semaphore.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Atomic和Semaphore的最大区别为，如果是瞬时的高并发，可以使请求在阻塞队列中排队，而不是马上拒绝请求，从而达到一个流量削峰的目的。</p><h4 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h4><p><img src="/images/java/tokenBucket.png"></p><p>令牌桶算法概念如下：  </p><ul><li>令牌以固定速率生成；</li><li>生成的令牌放入令牌桶中存放，如果令牌桶满了则多余的令牌会直接丢弃，当请求到达时，会尝试从令牌桶中取令牌，取到了令牌的请求可以执行；</li><li>如果桶空了，那么尝试取令牌的请求会被直接丢弃。</li></ul><p>令牌桶算法既能够将所有的请求平均分布到时间区间内，又能接受服务器能够承受范围内的突发请求，因此是目前使用较为广泛的一种限流算法。Google 的开源项目 guava 提供了 RateLimiter 类，实现了单点的令牌桶限流。为了学习,模拟一下该算法的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单限流器-令牌桶算法&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 只需要记录一个下一令牌产生的时间，并动态更新它，就能够轻松完成限流功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLimiter</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前令牌桶中的令牌数量</span></span><br><span class="line">    <span class="keyword">long</span> storedPermits = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 令牌桶的容量</span></span><br><span class="line">    <span class="keyword">long</span> maxPermits = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// 下一令牌产生时间</span></span><br><span class="line">    <span class="keyword">long</span> next = System.nanoTime();</span><br><span class="line">    <span class="comment">// 发放令牌间隔：纳秒</span></span><br><span class="line">    <span class="keyword">long</span> interval = <span class="number">1000_000_000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求时间在下一令牌产生时间之后,则</span></span><br><span class="line">    <span class="comment">// 1.重新计算令牌桶中的令牌数</span></span><br><span class="line">    <span class="comment">// 2.将下一个令牌发放时间重置为当前时间</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resync</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (now &gt; next) &#123;</span><br><span class="line">            <span class="comment">// 新产生的令牌数</span></span><br><span class="line">            <span class="keyword">long</span> newPermits = (now - next) / interval;</span><br><span class="line">            <span class="comment">// 新令牌增加到令牌桶</span></span><br><span class="line">            storedPermits = Math.min(maxPermits, storedPermits + newPermits);</span><br><span class="line">            <span class="comment">// 将下一个令牌发放时间重置为当前时间</span></span><br><span class="line">            next = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预占令牌，返回能获取令牌的时间</span></span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">reserve</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        resync(now);</span><br><span class="line">        <span class="comment">// 能够获取令牌的时间</span></span><br><span class="line">        <span class="keyword">long</span> at = next;</span><br><span class="line">        <span class="comment">// 令牌桶中能提供的令牌</span></span><br><span class="line">        <span class="keyword">long</span> fb = Math.min(<span class="number">1</span>, storedPermits);</span><br><span class="line">        <span class="comment">// 令牌净需求：首先减掉令牌桶中的令牌</span></span><br><span class="line">        <span class="keyword">long</span> nr = <span class="number">1</span> - fb;</span><br><span class="line">        <span class="comment">// 重新计算下一令牌产生时间</span></span><br><span class="line">        next = next + nr * interval;</span><br><span class="line">        <span class="comment">// 重新计算令牌桶中的令牌</span></span><br><span class="line">        <span class="keyword">this</span>.storedPermits -= fb;</span><br><span class="line">        <span class="keyword">return</span> at;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 申请令牌</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 申请令牌的时间</span></span><br><span class="line">        <span class="keyword">long</span> now = System.nanoTime();</span><br><span class="line">        <span class="comment">// 预占令牌</span></span><br><span class="line">        <span class="keyword">long</span> at = reserve(now);</span><br><span class="line">        <span class="keyword">long</span> waitTime = Math.max(at - now, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 按照条件等待</span></span><br><span class="line">        <span class="keyword">if</span> (waitTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.NANOSECONDS.sleep(waitTime);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 限流器流速</span></span><br><span class="line">        SimpleLimiter limiter = <span class="keyword">new</span> SimpleLimiter();</span><br><span class="line">        <span class="comment">// 执行任务的线程池</span></span><br><span class="line">        ExecutorService es = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="comment">// 记录上一次执行时间</span></span><br><span class="line">        <span class="keyword">long</span> prev = System.nanoTime();</span><br><span class="line">        <span class="comment">// 测试执行20次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 限流器限流</span></span><br><span class="line">            limiter.acquire();</span><br><span class="line">            <span class="comment">// 提交任务异步执行</span></span><br><span class="line">            <span class="keyword">long</span> cur = System.nanoTime();</span><br><span class="line">            es.execute(<span class="keyword">new</span> Task(prev, cur, i));</span><br><span class="line">            prev = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> prev;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> cur;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="keyword">long</span> prev, <span class="keyword">long</span> cur, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.cur = cur;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 打印时间间隔:毫秒</span></span><br><span class="line">        System.out.println(index + <span class="string">&quot; : &quot;</span> + (cur - prev) / <span class="number">1000_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h4 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h4><p><img src="/images/java/leakyBucket.png"></p><p>漏桶算法概念如下：</p><ul><li>将每个请求视作 “ 水滴 “ 放入 “ 漏桶 “ 进行存储；</li><li>“漏桶 “ 以固定速率向外 “ 漏 “ 出请求来执行如果 “ 漏桶 “ 空了则停止 “ 漏水”；</li><li>如果 “ 漏桶 “ 满了则多余的 “ 水滴 “ 会被直接丢弃。</li></ul><p>漏桶算法多使用队列实现，服务的请求会存到队列中，服务的提供方则按照固定的速率从队列中取出请求并执行，过多的请求则放在队列中排队或直接拒绝。</p><p>缺点：漏桶算法的缺陷也很明显，当短时间内有大量的突发请求时，即便此时服务器没有任何负载，每个请求也都得在队列中等待一段时间才能被响应。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;工作中遇到了限制请求数的场景，学习和记录一下解决办法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h4&gt;&lt;p&gt;在开发高并发系统时有三把利器用来保护系统：&lt;strong&gt;缓存&lt;/strong&gt;、&lt;strong&gt;降级&lt;/strong&gt;和&lt;strong&gt;限流&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;缓存&lt;/strong&gt;:缓存的目的是提升系统访问速度和增大系统处理容量&lt;br&gt;&lt;strong&gt;降级&lt;/strong&gt;:降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行&lt;br&gt;&lt;strong&gt;限流&lt;/strong&gt;:限流的目的是通过对并发访问/请求进行限速，或者对一个时间窗口内的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务、排队或等待、降级等处理  &lt;/p&gt;
&lt;h4 id=&quot;限流&quot;&gt;&lt;a href=&quot;#限流&quot; class=&quot;headerlink&quot; title=&quot;限流&quot;&gt;&lt;/a&gt;限流&lt;/h4&gt;&lt;p&gt;常见的限流算法有计数器、令牌桶和漏桶算法&lt;/p&gt;</summary>
    
    
    
    <category term="jave" scheme="http://tungsing.cc/categories/jave/"/>
    
    <category term="algorithm" scheme="http://tungsing.cc/categories/jave/algorithm/"/>
    
    <category term="限流" scheme="http://tungsing.cc/categories/jave/algorithm/%E9%99%90%E6%B5%81/"/>
    
    
    <category term="java" scheme="http://tungsing.cc/tags/java/"/>
    
    <category term="algorithm" scheme="http://tungsing.cc/tags/algorithm/"/>
    
    <category term="限流" scheme="http://tungsing.cc/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>volitile 关键字</title>
    <link href="http://tungsing.cc/2019/05/26/java/thread/chapter04/"/>
    <id>http://tungsing.cc/2019/05/26/java/thread/chapter04/</id>
    <published>2019-05-26T07:16:45.868Z</published>
    <updated>2020-05-28T06:38:24.689Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>volatile: 解决的是变量在多线程之间的可见性<br>synchronized: 解决的是多线程之间访问资源的同步性</p><p>volatile轻量级的线性间通信</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;&gt;&lt;/a&gt;常用方法&lt;/h3&gt;&lt;p&gt;volatile: 解决的是变量在多线程之间的可见性&lt;br&gt;synchronized: 解决的是多线程之间访问资源的同步性&lt;</summary>
      
    
    
    
    <category term="java" scheme="http://tungsing.cc/categories/java/"/>
    
    
    <category term="java" scheme="http://tungsing.cc/tags/java/"/>
    
    <category term="thread" scheme="http://tungsing.cc/tags/thread/"/>
    
    <category term="多线程" scheme="http://tungsing.cc/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自己实现本地缓存</title>
    <link href="http://tungsing.cc/2019/05/17/cache/local_cache/"/>
    <id>http://tungsing.cc/2019/05/17/cache/local_cache/</id>
    <published>2019-05-17T14:27:00.175Z</published>
    <updated>2019-05-18T08:35:05.324Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>在扩展框架中的缓存组件相关功能时浏览了本地缓存的实现，其核心是LUR算法，记录下LUR的相关内容加深记忆和理解</p></blockquote><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>windows 10</li><li>jdk7</li></ul><h4 id="LUR"><a href="#LUR" class="headerlink" title="LUR"></a>LUR</h4><p>LRU全称是Least Recently Used，即<strong>最近最久未使用</strong>的意思。 LRU算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。</p><span id="more"></span><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>对cache的基本操作有：插入(insert)、替换(replace)、查找(lookup)<br>为了能够快速删除最久没有访问的数据项和插入最新的数据项，我们使用<strong>双向链表</strong>连接Cache中的数据项，并且保证链表维持数据项从最近访问到最旧访问的顺序。</p><ul><li>插入：当Cache未满时，新的数据项只需插到双链表头部即可。时间复杂度为O(1).</li><li>替换：当Cache已满时，将新的数据项插到双链表头部，并删除双链表的尾结点即可。时间复杂度为O(1).</li><li>查找：每次数据项被查询到时，都将此数据项移动到链表头部。</li></ul><p>经过分析，我们知道使用双向链表可以保证插入和替换的时间复杂度是O(1)，但查询的时间复杂度是O(n)，因为需要对双链表进行遍历。为了让查找效率也达到O(1)，很自然的会想到使用 hash table 。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>从上述分析可知，我们需要使用两种数据结构：</p><ol><li>双向链表(Doubly Linked List)</li><li>哈希表(Hash Table)</li></ol><p>Java中的LinkedHashMap正好满足这两种数据结构，直接用LinkedHashMap来实现(框架代码就是基于LinkedHashMap实现的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1456882507664137630L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存的最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_CACHE_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// true:按访问排序</span></span><br><span class="line">        <span class="comment">// 初始值必须是2 的N次方，最大容量2 的30次方</span></span><br><span class="line">        <span class="comment">// 初始值16</span></span><br><span class="line">        <span class="keyword">super</span>(<span class="number">1</span> &lt;&lt; <span class="number">4</span>, <span class="number">0.75F</span>, <span class="keyword">true</span>);</span><br><span class="line">        MAX_CACHE_SIZE = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Entry&lt;K, V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; MAX_CACHE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心实现只需要继承LinkedHashMap，扩展它的removeEldestEntry方法即可，在多线程环境使用时使用 Collections.synchronizedMap()方法实现线程安全操作。框架中的细节代码就很多了。</p><h4 id="简单测试"><a href="#简单测试" class="headerlink" title="简单测试"></a>简单测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LRUCache&lt;Object, Object&gt; cache = <span class="keyword">new</span> LRUCache&lt;Object, Object&gt;(<span class="number">8</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;5&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;6&quot;</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;7&quot;</span>, <span class="string">&quot;7&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cache.get(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    cache.get(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;8&quot;</span>, <span class="string">&quot;8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;Object, Object&gt; entry : cache.entrySet()) &#123;</span><br><span class="line">        System.out.println(entry.getKey() + <span class="string">&quot;:&quot;</span> + entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1:1</span><br><span class="line">2:2</span><br><span class="line">3:3</span><br><span class="line">4:4</span><br><span class="line">7:7</span><br><span class="line">6:6</span><br><span class="line">5:5</span><br><span class="line">8:8</span><br></pre></td></tr></table></figure><p>观察结果当超出最大容量自动删除了最久未使用的数据，访问过的数据排到了链表前端，符合预期</p><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>了解原理后不管是解决问题还是重复造轮子都会得心应手。但不推荐重复造轮子，google guava cache 就是基于LUR算法实现的一个基础类库。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>1.<a href="https://songlee24.github.io/2015/05/10/design-LRU-Cache/">设计并实现一个LRU Cache</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在扩展框架中的缓存组件相关功能时浏览了本地缓存的实现，其核心是LUR算法，记录下LUR的相关内容加深记忆和理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;windows 10&lt;/li&gt;
&lt;li&gt;jdk7&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;LUR&quot;&gt;&lt;a href=&quot;#LUR&quot; class=&quot;headerlink&quot; title=&quot;LUR&quot;&gt;&lt;/a&gt;LUR&lt;/h4&gt;&lt;p&gt;LRU全称是Least Recently Used，即&lt;strong&gt;最近最久未使用&lt;/strong&gt;的意思。 LRU算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。&lt;/p&gt;</summary>
    
    
    
    <category term="cache" scheme="http://tungsing.cc/categories/cache/"/>
    
    <category term="jave" scheme="http://tungsing.cc/categories/cache/jave/"/>
    
    <category term="algorithm" scheme="http://tungsing.cc/categories/cache/jave/algorithm/"/>
    
    
    <category term="java" scheme="http://tungsing.cc/tags/java/"/>
    
    <category term="cache" scheme="http://tungsing.cc/tags/cache/"/>
    
    <category term="algorithm" scheme="http://tungsing.cc/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>golang 学习</title>
    <link href="http://tungsing.cc/2019/05/11/golang/golang-leaning/"/>
    <id>http://tungsing.cc/2019/05/11/golang/golang-leaning/</id>
    <published>2019-05-11T14:03:57.100Z</published>
    <updated>2019-05-18T09:55:10.893Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>为了看懂某站的源代码,就学了一下golang,记录一下学习过程慢慢积累</p></blockquote><h4 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h4><p>代码记录在<a href="https://github.com/tungSing/golang-learning">github</a>上面,下面列举一下文件夹的内容，以防忘记</p><span id="more"></span><table><thead><tr><th align="left">文件夹</th><th align="left">内容</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">chapter01</td><td align="left">经典Hello World</td><td align="left"></td></tr><tr><td align="left">chapter02</td><td align="left">基础语法</td><td align="left"></td></tr><tr><td align="left">chapter03</td><td align="left">数据类型</td><td align="left"></td></tr><tr><td align="left">chapter04</td><td align="left">变量</td><td align="left"></td></tr><tr><td align="left">chapter05</td><td align="left">常量</td><td align="left"></td></tr><tr><td align="left">chapter06</td><td align="left">运算符</td><td align="left"></td></tr><tr><td align="left">chapter07</td><td align="left">流程控制</td><td align="left"></td></tr><tr><td align="left">chapter08</td><td align="left">函数</td><td align="left"></td></tr><tr><td align="left">chapter09</td><td align="left">方法</td><td align="left"></td></tr><tr><td align="left">chapter10</td><td align="left">接口</td><td align="left"></td></tr><tr><td align="left">chapter11</td><td align="left">错误</td><td align="left"></td></tr><tr><td align="left">chapter12</td><td align="left">异常</td><td align="left"></td></tr><tr><td align="left">chapter13</td><td align="left">单元测试</td><td align="left"></td></tr><tr><td align="left">chapter14</td><td align="left">并发</td><td align="left"></td></tr><tr><td align="left">cmd</td><td align="left">main</td><td align="left">主程序</td></tr></tbody></table><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://golang.org/doc/">官网</a></li><li><a href="https://www.kancloud.cn/liupengjie/go/570004">golang</a></li><li><a href="https://www.runoob.com/go/go-tutorial.html">Go 语言教程</a></li><li><a href="https://yushuangqi.com/blog/2016/understanding-golang-import-package.html">理解Go import</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;为了看懂某站的源代码,就学了一下golang,记录一下学习过程慢慢积累&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;学习记录&quot;&gt;&lt;a href=&quot;#学习记录&quot; class=&quot;headerlink&quot; title=&quot;学习记录&quot;&gt;&lt;/a&gt;学习记录&lt;/h4&gt;&lt;p&gt;代码记录在&lt;a href=&quot;https://github.com/tungSing/golang-learning&quot;&gt;github&lt;/a&gt;上面,下面列举一下文件夹的内容，以防忘记&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://tungsing.cc/categories/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/categories/golang/go/"/>
    
    
    <category term="golang" scheme="http://tungsing.cc/tags/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang import 理解</title>
    <link href="http://tungsing.cc/2019/04/25/golang/golang-import/"/>
    <id>http://tungsing.cc/2019/04/25/golang/golang-import/</id>
    <published>2019-04-25T03:09:58.634Z</published>
    <updated>2019-05-18T09:55:16.438Z</updated>
    
    <content type="html"><![CDATA[<h4 id="包的理解"><a href="#包的理解" class="headerlink" title="包的理解"></a>包的理解</h4><p>Golang中有package的概念。在go源码文件的第一行就是先声明包名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package xxx</span><br></pre></td></tr></table></figure><p>这里的包名相当于一个标签，不是字符串。和所在文件夹没有关系，比如:上述源码在GOPATH/golang-learning/chapter06/文件夹下，它的包名就是<strong>xxx</strong></p><span id="more"></span><h4 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h4><p>用improt关键字导入包，包的导入路径是基于工作目录的。因此Go会在工作目录src子目录下查找包</p><ul><li><p>导入标准包使用的是给定的短路径，如“fmt”、“net/http”</p><p>$GOPATH/src/learning/chapter01/hello.go</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package hello</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">func SayHello()  &#123;</span><br><span class="line">    fmt.Println(&quot;Hello,World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>项目的包，需要在工作目录下指定一个目录</p><p>$GOPATH/src/learning/cmd/main.go</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;learning/chapter01&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    hello.SayHello()</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>**注意:**同一个路径下不支持定义多个包，会报编译错误</p></li></ul><h4 id="导入包的方式"><a href="#导入包的方式" class="headerlink" title="导入包的方式"></a>导入包的方式</h4><p>导入使用包有四种方式，不同方式用途不一样</p><ol><li><p>import “learning/chapter01”<br>常规方式，通过包名hello调用SayHello方法。hello.SayHello()</p></li><li><p>import h “learning/chapter01”<br>这里的 h 是包名 hello 的别名，h.SyayHello() 。该方式合适的场景</p><ul><li>包名过于复杂或者意思不明确<br>我写的代码其实就很不明确，所以最好要起别名来明确含义<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import hello &quot;learning/chapter01&quot;</span><br></pre></td></tr></table></figure></li><li>包名和其他包冲突<br>随着项目代码的不断增加或引入第三方包，很大概率大家会用相同的包名，就需要用别名来区别<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">   &quot;errors&quot;</span><br><span class="line">   bizError &quot;learning/chapter11&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>import . “learning/chapter01”<br>这里的点”.”符号表示，对包 hello 的调用直接省略包名，你我以后就是一家人，不分彼此，你的东西就像我就的一样，随便用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import . &quot;learning/chapter01&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    SayHello()</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li><li><p>improt _ “learning/chapter01”<br>当导入一个包时，该包下的文件里所有init()函数都会被执行,我们就需要用“_”符合来导入包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import _ &quot;learning/chapter01&quot;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://yushuangqi.com/blog/2016/understanding-golang-import-package.html">理解Go import</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;包的理解&quot;&gt;&lt;a href=&quot;#包的理解&quot; class=&quot;headerlink&quot; title=&quot;包的理解&quot;&gt;&lt;/a&gt;包的理解&lt;/h4&gt;&lt;p&gt;Golang中有package的概念。在go源码文件的第一行就是先声明包名：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;package xxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的包名相当于一个标签，不是字符串。和所在文件夹没有关系，比如:上述源码在GOPATH/golang-learning/chapter06/文件夹下，它的包名就是&lt;strong&gt;xxx&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="golang" scheme="http://tungsing.cc/categories/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/categories/golang/go/"/>
    
    
    <category term="golang" scheme="http://tungsing.cc/tags/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 项目组织</title>
    <link href="http://tungsing.cc/2019/04/25/golang/golang-project/"/>
    <id>http://tungsing.cc/2019/04/25/golang/golang-project/</id>
    <published>2019-04-25T02:59:17.907Z</published>
    <updated>2019-05-12T01:47:20.861Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>项目目录结构如何组织，一般语言都是没有规定。但Go语言这方面做了规定，这样可以保持一致性</p></blockquote><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><ol><li>GOROOT就是Go被安装的地方</li><li>GOPATH指向你的工作区,这就是如何让Go找到你的代码</li><li>其他环境变量,一般情况不需要设置，要查看所有Go环境变量，请输入:go env<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\tungS&gt;go env</span><br><span class="line">set GOARCH=amd64</span><br><span class="line">set GOBIN=</span><br><span class="line">set GOCACHE=C:\Users\tungS\AppData\Local\go-build</span><br><span class="line">set GOEXE=.exe</span><br><span class="line">set GOFLAGS=</span><br><span class="line">set GOHOSTARCH=amd64</span><br><span class="line">set GOHOSTOS=windows</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><span id="more"></span></li></ol><h4 id="代码组织结构"><a href="#代码组织结构" class="headerlink" title="代码组织结构"></a>代码组织结构</h4><ol><li><p>一般的，一个Go项目在GOPATH下，会有如下三个目录：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|--bin</span><br><span class="line">|--pkg</span><br><span class="line">|--src</span><br></pre></td></tr></table></figure><p> bin存放编译后的可执行文件；<br> pkg存放编译后的包文件；<br> src存放项目源文件。<br> 一般，bin和pkg目录可以不创建，go命令会自动创建（如 go install），只需要创建src目录即可。对于pkg目录，曾经有人问：我把Go中的包放入pkg下面，怎么不行啊？他直接把Go包的源文件放入了pkg中。这显然是不对的。pkg中的文件是Go编译生成的，而不是手动放进去的。（一般文件后缀.a）对于src目录，存放源文件，Go中源文件以包（package）的形式组织。通常，新建一个包就在src目录中新建一个文件夹。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;项目目录结构如何组织，一般语言都是没有规定。但Go语言这方面做了规定，这样可以保持一致性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境变量&quot;&gt;&lt;a href=&quot;#环境变量&quot; class=&quot;headerlink&quot; title=&quot;环境变量&quot;&gt;&lt;/a&gt;环境变量&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;GOROOT就是Go被安装的地方&lt;/li&gt;
&lt;li&gt;GOPATH指向你的工作区,这就是如何让Go找到你的代码&lt;/li&gt;
&lt;li&gt;其他环境变量,一般情况不需要设置，要查看所有Go环境变量，请输入:go env&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:\Users\tungS&amp;gt;go env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOARCH=amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOBIN=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOCACHE=C:\Users\tungS\AppData\Local\go-build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOEXE=.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOFLAGS=&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOHOSTARCH=amd64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set GOHOSTOS=windows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="golang" scheme="http://tungsing.cc/categories/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/categories/golang/go/"/>
    
    
    <category term="golang" scheme="http://tungsing.cc/tags/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang IDE 选择</title>
    <link href="http://tungsing.cc/2019/04/25/golang/golang-ide/"/>
    <id>http://tungsing.cc/2019/04/25/golang/golang-ide/</id>
    <published>2019-04-25T02:54:18.830Z</published>
    <updated>2019-04-25T02:57:55.774Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>IDE有事半功倍效果，所以选择一个，但IDE对原理理解有影响</p></blockquote><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>据说JetBrains家的IDE比较好用所以直接选择<a href="https://www.jetbrains.com/go/">GoLand</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;IDE有事半功倍效果，所以选择一个，但IDE对原理理解有影响&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;</summary>
      
    
    
    
    <category term="golang" scheme="http://tungsing.cc/categories/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/categories/golang/go/"/>
    
    
    <category term="golang" scheme="http://tungsing.cc/tags/golang/"/>
    
    <category term="go" scheme="http://tungsing.cc/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>golang 环境搭建</title>
    <link href="http://tungsing.cc/2019/04/21/golang/golang-install/"/>
    <id>http://tungsing.cc/2019/04/21/golang/golang-install/</id>
    <published>2019-04-21T14:12:29.323Z</published>
    <updated>2019-05-11T14:41:47.072Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>开始学习golang</p></blockquote><h4 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h4><p>centos7</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><ol><li><a href="https://golang.org/dl/">go官网</a>下载安装包</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><span id="more"></span><ol start="2"><li>根据自己需要解压安装</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz</span><br></pre></td></tr></table></figure><ol start="3"><li><p>配置环境变量<br>在/etc/profile文件中添加export PATH=$PATH:/usr/local/go/bin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/profile</span><br><span class="line"># source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># go version</span><br><span class="line">go version go1.12.4 linux/amd64</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://golang.org/doc/install">官网</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.1.md">安装go</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;开始学习golang&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h4&gt;&lt;p&gt;centos7&lt;/p&gt;
&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://golang.org/dl/&quot;&gt;go官网&lt;/a&gt;下载安装包&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# wget https://dl.google.com/go/go1.12.4.linux-amd64.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="golang" scheme="http://tungsing.cc/categories/golang/"/>
    
    
    <category term="golang" scheme="http://tungsing.cc/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>DataUtils工具类优化</title>
    <link href="http://tungsing.cc/2019/03/22/java/date-util/"/>
    <id>http://tungsing.cc/2019/03/22/java/date-util/</id>
    <published>2019-03-22T02:25:45.542Z</published>
    <updated>2019-03-22T06:07:36.605Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>之前就看资料说SimpleDateFormat是线程不安全的，正好框架里面有自己的DataUtils类，正好优化并学习一下</p></blockquote><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>jdk1.7</p><span id="more"></span><h4 id="测试框架中代码"><a href="#测试框架中代码" class="headerlink" title="测试框架中代码"></a>测试框架中代码</h4><p>开20个线程去格式日期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    ExecutorService service = Executors.newFixedThreadPool(<span class="number">100</span>);</span><br><span class="line">    <span class="comment">// 开启20个线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                    System.out.println(DateUtils.parseDate(<span class="string">&quot;2019-03-22 10:03:25&quot;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    service.shutdown();</span><br><span class="line">    service.awaitTermination(<span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Sun Mar 01 10:03:25 CST 1970</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;33E&quot;</span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:419)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)Thu Jan 01 00:03:25 CST 1970</span><br><span class="line"></span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1934)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line"></span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;Tue Jan 01 00:03:25 CST 2019</span><br><span class="line"></span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)Thu Jan 22 10:03:25 CST 1970</span><br><span class="line"></span><br><span class="line">    at java.lang.Long.parseLong(Long.java:431)</span><br><span class="line">Wed Dec 31 00:00:00 CST 1969</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)</span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">Tue Jan 01 00:03:25 CST 2019</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1589)</span><br><span class="line">Tue Jan 01 00:03:25 CST 2019</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)Thu Jan 22 00:00:25 CST 1970</span><br><span class="line"></span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">Tue Jan 01 00:00:25 CST 2019    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line"></span><br><span class="line">Thu Jan 01 00:44:40 CST 1970</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">Tue Jan 01 03:03:25 CST 2019</span><br><span class="line">nulljava.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line"></span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:431)</span><br><span class="line">Thu Jan 01 00:00:25 CST 1970</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)</span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1589)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">java.lang.NumberFormatException: multiple pointsnull</span><br><span class="line"></span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1082)</span><br><span class="line">    at java.lang.Double.parseDouble(Double.java:510)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.text.DigitList.getDouble(DigitList.java:151)</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1302)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1934)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">Thu Jul 10 10:03:25 CST 5881580</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">null</span><br><span class="line">java.lang.NumberFormatException: multiple points</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019    at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1082)</span><br><span class="line"></span><br><span class="line">    at java.lang.Double.parseDouble(Double.java:510)</span><br><span class="line">    at java.text.DigitList.getDouble(DigitList.java:151)Fri Mar 22 10:03:25 CST 2019</span><br><span class="line"></span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1302)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1934)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;1.01&quot;</span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:419)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)</span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1934)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">null</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:431)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)</span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1934)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">null</span><br><span class="line">java.lang.NumberFormatException: For input string: &quot;&quot;</span><br><span class="line">    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:431)</span><br><span class="line">    at java.lang.Long.parseLong(Long.java:468)</span><br><span class="line">    at java.text.DigitList.getLong(DigitList.java:177)</span><br><span class="line">    at java.text.DecimalFormat.parse(DecimalFormat.java:1297)</span><br><span class="line">    at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1589)</span><br><span class="line">    at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1311)</span><br><span class="line">    at java.text.DateFormat.parse(DateFormat.java:335)</span><br><span class="line">    at com.resoft.original.framework.common.OriginalDateUtils.parseDate(OriginalDateUtils.java:275)</span><br><span class="line">    at com.resoft.original.framework.common.Test$1.run(Test.java:35)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)</span><br><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:662)</span><br><span class="line">null</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br></pre></td></tr></table></figure><p>分析错误日志有如下错误</p><ul><li>会出现日期不对的情况</li><li>java.lang.NumberFormatException: For input string xxx</li><li>java.lang.NumberFormatException: multiple points</li></ul><h4 id="错误原因分析"><a href="#错误原因分析" class="headerlink" title="错误原因分析"></a>错误原因分析</h4><p>首先看代码是如何写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;DateFormat, SimpleDateFormat&gt; dateFormaters = <span class="keyword">new</span> HashMap&lt;DateFormat, SimpleDateFormat&gt;(<span class="number">3</span>, <span class="number">0.2f</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat <span class="title">getDateFormater</span><span class="params">(DateFormat format)</span> </span>&#123;</span><br><span class="line">    SimpleDateFormat dateFormater = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((dateFormater = dateFormaters.get(format)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        dateFormater = <span class="keyword">new</span> SimpleDateFormat(format.format);</span><br><span class="line">        dateFormaters.put(format, dateFormater);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dateFormater;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> java.util.<span class="function">Date <span class="title">parseDate</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getDateFormater(DateFormat.YMDHMS_HYPHEN).parse(</span><br><span class="line">                            dateStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DateFormat</strong>是枚举，定义了各种日期格式<br>代码本质还是获取一个 <strong>静态</strong> 的 <strong>SimpleDateFormat</strong> 对象，引入Map是为了提高效率。<br>那么在多线程的情况下SimpleDateFormat对象实例就会 <strong>被多个线程共享</strong> ，通过看源码找原因</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">public Date parse(String text, ParsePosition pos) &#123;</span><br><span class="line"></span><br><span class="line">    checkNegativeNumberExpression();</span><br><span class="line"></span><br><span class="line">    int start = pos.index;</span><br><span class="line">    int oldStart = start;</span><br><span class="line">    int textLength = text.length();</span><br><span class="line"></span><br><span class="line">    calendar.clear(); // Clears all the time fields</span><br><span class="line"></span><br><span class="line">    boolean[] ambiguousYear = &#123; false &#125;;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; compiledPattern.length;) &#123;</span><br><span class="line">        int tag = compiledPattern[i] &gt;&gt;&gt; 8;</span><br><span class="line">        int count = compiledPattern[i++] &amp; 0xff;</span><br><span class="line">        if (count == 255) &#123;</span><br><span class="line">            count = compiledPattern[i++] &lt;&lt; 16;</span><br><span class="line">            count |= compiledPattern[i++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        switch (tag) &#123;</span><br><span class="line">        case TAG_QUOTE_ASCII_CHAR:</span><br><span class="line">            if (start &gt;= textLength || text.charAt(start) != (char) count) &#123;</span><br><span class="line">                pos.index = oldStart;</span><br><span class="line">                pos.errorIndex = start;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            start++;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        case TAG_QUOTE_CHARS:</span><br><span class="line">            while (count-- &gt; 0) &#123;</span><br><span class="line">                if (start &gt;= textLength || text.charAt(start) != compiledPattern[i++]) &#123;</span><br><span class="line">                    pos.index = oldStart;</span><br><span class="line">                    pos.errorIndex = start;</span><br><span class="line">                    return null;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line">            boolean obeyCount = false;</span><br><span class="line">            boolean useFollowingMinusSignAsDelimiter = false;</span><br><span class="line"></span><br><span class="line">            if (i &lt; compiledPattern.length) &#123;</span><br><span class="line">                int nextTag = compiledPattern[i] &gt;&gt;&gt; 8;</span><br><span class="line">                if (!(nextTag == TAG_QUOTE_ASCII_CHAR || nextTag == TAG_QUOTE_CHARS)) &#123;</span><br><span class="line">                    obeyCount = true;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (hasFollowingMinusSign &amp;&amp; (nextTag == TAG_QUOTE_ASCII_CHAR || nextTag == TAG_QUOTE_CHARS)) &#123;</span><br><span class="line">                    int c;</span><br><span class="line">                    if (nextTag == TAG_QUOTE_ASCII_CHAR) &#123;</span><br><span class="line">                        c = compiledPattern[i] &amp; 0xff;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        c = compiledPattern[i + 1];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if (c == minusSign) &#123;</span><br><span class="line">                        useFollowingMinusSignAsDelimiter = true;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            start = subParse(text, start, tag, count, obeyCount, ambiguousYear, pos, useFollowingMinusSignAsDelimiter);</span><br><span class="line">            if (start &lt; 0) &#123;</span><br><span class="line">                pos.index = oldStart;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pos.index = start;</span><br><span class="line">    Date parsedDate;</span><br><span class="line">    try &#123;</span><br><span class="line">        if (ambiguousYear[0]) &#123;</span><br><span class="line">            Calendar savedCalendar = (Calendar) calendar.clone();</span><br><span class="line">            parsedDate = calendar.getTime();</span><br><span class="line">            if (parsedDate.before(defaultCenturyStart)) &#123;</span><br><span class="line">                savedCalendar.set(Calendar.YEAR, defaultCenturyStartYear + 100);</span><br><span class="line">                parsedDate = savedCalendar.getTime();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else</span><br><span class="line">            parsedDate = calendar.getTime();</span><br><span class="line">    &#125; catch (IllegalArgumentException e) &#123;</span><br><span class="line">        pos.errorIndex = start;</span><br><span class="line">        pos.index = oldStart;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return parsedDate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点关注 <strong>calendar.clear()</strong> , <strong>calendar.getTime()</strong> 方法，SimpleDateFormat的parse方法实际操作的就是 <strong>Calendar</strong> 。</p><p>因为我们声明SimpleDateFormat为static变量，那么它的Calendar变量也就是一个共享变量，可以被多个线程访问。</p><p>假设线程A执行完calendar.clear()方法，这时候被挂起，线程B获得CPU执行权。线程B执行到了calendar.getTime()方法就获取到空值了，而这就是引发问题的根源，出现时间不对，线程挂死等等。</p><p><strong>其实SimpleDateFormat源码上作者也给过我们提示：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> * &lt;h4&gt;&lt;a name=&quot;synchronization&quot;&gt;Synchronization&lt;/a&gt;&lt;/h4&gt;</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * Date formats are not synchronized.</span><br><span class="line"> * 日期格式不同步。</span><br><span class="line"> * It is recommended to create separate format instances for each thread.</span><br><span class="line"> * 建议为每个线程创建单独的格式实例。</span><br><span class="line"> * If multiple threads access a format concurrently, it must be synchronized</span><br><span class="line"> * externally.</span><br><span class="line"> * 如果多个线程同时访问一种格式，则必须在外部同步该格式。</span><br><span class="line"> *</span><br><span class="line"> * @see          &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/i18n/format/simpleDateFormat.html&quot;&gt;Java Tutorial&lt;/a&gt;</span><br><span class="line"> * @see          java.util.Calendar</span><br><span class="line"> * @see          java.util.TimeZone</span><br><span class="line"> * @see          DateFormat</span><br><span class="line"> * @see          DateFormatSymbols</span><br><span class="line"> * @version      %I%, %G% </span><br><span class="line"> * @author       Mark Davis, Chen-Lieh Huang, Alan Liu</span><br><span class="line"> */</span><br><span class="line">public class SimpleDateFormat extends DateFormat &#123;</span><br></pre></td></tr></table></figure><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol><li><p>只要在用的时候创建新实例，不用static修饰。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static Date parse(String strDate) throws ParseException&#123;</span><br><span class="line">     SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    return sdf.parse(strDate);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如上代码，仅在需要用到的地方创建一个新的实例，就没有线程安全问题，不过也加重了创建对象的负担，会频繁地创建和销毁对象，效率较低。</p></li><li><p>使用synchronized来SimpleDateFormat对象</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    </span><br><span class="line">public static Date parse(String strDate) throws ParseException&#123;</span><br><span class="line">    synchronized(sdf)&#123;</span><br><span class="line">        return sdf.parse(strDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 当线程较多时，当一个线程调用该方法时，其他想要调用此方法的线程就要block，多线程并发量大的时候会对性能有一定的影响。</p></li><li><p>使用ThreadLocal</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static ThreadLocal&lt;DateFormat&gt; threadLocal = new ThreadLocal&lt;DateFormat&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected DateFormat initialValue() &#123;</span><br><span class="line">        return new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">public static Date parse(String dateStr) throws ParseException &#123;</span><br><span class="line">    return threadLocal.get().parse(dateStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 使用ThreadLocal, 也是将共享变量变为独享，线程独享肯定能比方法独享在并发环境中能减少不少创建对象的开销。如果对性能要求比较高的情况下，一般推荐使用这种方法。</p></li></ol><h4 id="优化框架代码"><a href="#优化框架代码" class="headerlink" title="优化框架代码"></a>优化框架代码</h4><p>作为框架代码必须要保证性能要求，用ThreadLocal来优化代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private static ThreadLocal&lt;java.text.DateFormat&gt; threadLocal = new ThreadLocal&lt;java.text.DateFormat&gt;();</span><br><span class="line"></span><br><span class="line">private static java.text.DateFormat getDateFormater(DateFormat format) &#123;</span><br><span class="line"></span><br><span class="line">    java.text.DateFormat dateFormater = threadLocal.get();</span><br><span class="line"></span><br><span class="line">    if (dateFormater == null) &#123;</span><br><span class="line">        dateFormater = new SimpleDateFormat(format.format);</span><br><span class="line">        threadLocal.set(dateFormater);</span><br><span class="line">    &#125;</span><br><span class="line">    return dateFormater;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用同样的测试代码测试，结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br><span class="line">......</span><br><span class="line">Fri Mar 22 10:03:25 CST 2019</span><br></pre></td></tr></table></figure><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>我们要站在巨人的肩膀上来做事，如果是jdk1.8 可以使用DateTimeFormatter对象来解析或格式化日期;或直接使用Joda-Time类库来处理时间相关问题。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDQ3MjQxNA==&mid=2247488579&idx=1&sn=938bf5c4060f5758d57bb38a3d273523&chksm=e9c5edf2deb264e41895a296a71db6363a7c24d1574d1262b2a74d464c73871ab3dfb65920e6&scene=0&xtrack=1&key=788e29d0e375da22ae1918949f053d336e5d7ab2e59ce890ecd71d5a145885fcf2722671187a039ed5b59af2d4c3850464f757906a2285995765793ba14984b93cca50a8ed3e4a4a13ecaf2a95d31b3b&ascene=1&uin=MTU2NTU1NTk1&devicetype=Windows+10&version=62060720&lang=zh_CN&pass_ticket=PfdkGv+C8N6NZrxvaV85VDtvqNFgqdfh6j143w0u0Go=">还在使用SimpleDateFormat？你的项目崩没？</a><br><a href="http://www.cnblogs.com/peida/archive/2013/05/31/3070790.html">深入理解Java：SimpleDateFormat安全的时间格式化</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;之前就看资料说SimpleDateFormat是线程不安全的，正好框架里面有自己的DataUtils类，正好优化并学习一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;p&gt;jdk1.7&lt;/p&gt;</summary>
    
    
    
    
    <category term="java" scheme="http://tungsing.cc/tags/java/"/>
    
    <category term="thread" scheme="http://tungsing.cc/tags/thread/"/>
    
    <category term="SimpleDateFormat" scheme="http://tungsing.cc/tags/SimpleDateFormat/"/>
    
  </entry>
  
  <entry>
    <title>Redhat7.5 安装 使用 GitLab</title>
    <link href="http://tungsing.cc/2019/02/28/git/gitlab_install/"/>
    <id>http://tungsing.cc/2019/02/28/git/gitlab_install/</id>
    <published>2019-02-28T08:00:10.908Z</published>
    <updated>2019-05-18T08:36:00.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h4><p>如果想安装指定版本，需要在下面的网站中下载指定版本。</p><ol><li><a href="https://packages.gitlab.com/gitlab/">GitLab资源库</a></li><li><a href="https://packages.gitlab.com/gitlab/gitlab-ce">GitLab资源库社区版</a></li><li><a href="https://packages.gitlab.com/gitlab/gitlab-ee">GitLab资源库企业版</a></li></ol><span id="more"></span><h4 id="安装社区版"><a href="#安装社区版" class="headerlink" title="安装社区版"></a>安装社区版</h4><p><a href="https://about.gitlab.com/install/?version=ce">官方安装文档</a></p><ol><li><p>安装并配置依赖(必要)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"># sudo systemctl enable sshd</span><br><span class="line"># sudo systemctl start sshd</span><br><span class="line"> </span><br><span class="line"># sudo firewall-cmd --permanent --add-service=http</span><br><span class="line"># sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure></li><li><p>安装Postfix(用来发送通知电子邮件)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum -y install postfix</span><br><span class="line"># sudo systemctl enable postfix</span><br><span class="line"># sudo systemctl start postfix</span><br></pre></td></tr></table></figure></li><li><p>添加GitLab包存储库</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure></li><li><p>安装GitLab包(将<a href="http://gitlab.resoft.css.com.cn作为您要访问gitlab的域名.安装过程将自动配置并启动该域名的gitlab/">http://gitlab.resoft.css.com.cn作为您要访问GitLab的域名。安装过程将自动配置并启动该域名的GitLab</a>)</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># EXTERNAL_URL=&quot;http://gitlab.resoft.css.com.cn&quot; yum install -y gitlab-ce</span><br></pre></td></tr></table></figure></li><li><p>相关命令</p><ul><li>查看运行状态  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo gitlab-ctl status</span><br></pre></td></tr></table></figure></li><li>启动  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo gitlab-ctl start</span><br></pre></td></tr></table></figure></li><li>停止  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo gitlab-ctl stop</span><br></pre></td></tr></table></figure></li><li>重启  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure></li><li>查看版本  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line">11.4.3-ee</span><br></pre></td></tr></table></figure></li></ul></li></ol><h4 id="配置并使用"><a href="#配置并使用" class="headerlink" title="配置并使用"></a>配置并使用</h4><ol><li>浏览域名(<a href="http://gitlab.resoft.css.com.cn)并登陆/">http://gitlab.resoft.css.com.cn)并登陆</a><br> 首次访问时，您将被重定向到密码重置页面。设置初始管理员帐户的密码。使用默认帐户的用户名root登录。<br> <img src="/images/git/login.png"></li><li>配置语言<br> 选择用户头像-&gt;点Setting-&gt;选择Profile，将Preferred Language改成简体中文后保存即可<br> <img src="/images/git/language.png"></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/qq_32596527/article/details/83617638">在CentOS 7 1804 中 安装 使用 GitLab</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;版本选择&quot;&gt;&lt;a href=&quot;#版本选择&quot; class=&quot;headerlink&quot; title=&quot;版本选择&quot;&gt;&lt;/a&gt;版本选择&lt;/h4&gt;&lt;p&gt;如果想安装指定版本，需要在下面的网站中下载指定版本。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://packages.gitlab.com/gitlab/&quot;&gt;GitLab资源库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packages.gitlab.com/gitlab/gitlab-ce&quot;&gt;GitLab资源库社区版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://packages.gitlab.com/gitlab/gitlab-ee&quot;&gt;GitLab资源库企业版&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="gitLab" scheme="http://tungsing.cc/tags/gitLab/"/>
    
    <category term="git" scheme="http://tungsing.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Sonatype Nexus Repository Manager私服搭建</title>
    <link href="http://tungsing.cc/2019/02/28/nexus/nexus/"/>
    <id>http://tungsing.cc/2019/02/28/nexus/nexus/</id>
    <published>2019-02-28T05:53:40.687Z</published>
    <updated>2019-02-28T06:55:58.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>在使用java开发用maven来管理工程常常会从远程仓库下载jar包，由于网络原因有时候会下载很慢；还有公司内部产品开发的代码又不能上传到中央仓库；故需要搭建一个maven的私有仓库。选择Sonatype Nexus来作为maven的私有仓库，Sonatype Nexus还可以做docker、npm等等的私有仓库。</p></blockquote><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>  Redhat 7.5 操作系统</li><li>  Sonatype Nexus Repository Manager 3.15</li><li>  jdk1.8</li></ul><span id="more"></span><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><ol><li>下载jdk安装包</li><li><a href="https://help.sonatype.com/repomanager3/download/download-archives---repository-manager-3">官网</a>下载Sonatype Nexus Repository Manager安装包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget http://download.sonatype.com/nexus/3/nexus-3.15.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure></li></ol><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ol><li><p>修改最大文件打开数<br> nexus要求最大文件打开数不小于65536，默认1024<br> 打开文件/etc/security/limits.conf在文件末尾添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 204800  </span><br><span class="line">* hard nofile 204800  </span><br><span class="line">* soft nproc 204800  </span><br><span class="line">* hard nproc 204800</span><br></pre></td></tr></table></figure><p> * 代表针对所有用户<br> noproc     是代表最大进程数<br> nofile     是代表最大文件打开数</p></li><li><p>创建用户组及用户并设置密码<br> Sonatype Nexus 不推荐root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd nexus</span><br><span class="line">useradd -g nexus nexus</span><br><span class="line">passwd xxx</span><br></pre></td></tr></table></figure><p> xxx:你的密码</p></li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li>解压到/opt/nexus目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zvxf nexus-3.15.2-01-unix.tar.gz</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ol><li><p>配置jdk</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi /opt/nexus/nexus-3.15.2-01/bin/nexus</span><br></pre></td></tr></table></figure><p> 找到INSTALL4J_JAVA_HOME_OVERRIDE添加java home目录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALL4J_JAVA_HOME_OVERRIDE=/opt/java/jdk1.8.0_131</span><br></pre></td></tr></table></figure></li><li><p>配置启动用户</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi /opt/nexus/nexus-3.15.2-01/bin/nexus.rc </span><br></pre></td></tr></table></figure><p> 默认为nexus用户修改root用户</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run_as_user=&quot;root&quot;</span><br></pre></td></tr></table></figure></li><li><p>配置WEB端口为80。默认为8081，如何不修改默认端口，启动用户无需配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /opt/nexus/nexus-3.15.2-01/etc/nexus-default.properties</span><br></pre></td></tr></table></figure></li><li><p>配置开机启动<br> 在目录/etc/systemd/system/添加nexus.service文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/systemd/system/nexus.service</span><br></pre></td></tr></table></figure><p> 添加如下内容</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nexus service</span><br><span class="line">After=network.target</span><br><span class="line">  </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">ExecStart=/opt/nexus/nexus-3.15.2-01/bin/nexus start</span><br><span class="line">ExecStop=/opt/nexus/nexus-3.15.2-01/bin/nexus stop</span><br><span class="line">User=root</span><br><span class="line">Restart=on-abort</span><br><span class="line">  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p> 激活服务并添加开机启动</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl daemon-reload</span><br><span class="line"># systemctl enable nexus.service</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start nexus.service</span><br></pre></td></tr></table></figure><p>查看日志，监控是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f /opt/nexus/sonatype-work/nexus3/log/nexus.log</span><br></pre></td></tr></table></figure><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>我想用80端口，所以用root用户启动。用nexus用户启动无法用80端口，会报一个错误，没找到解决办法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">jvm 1    | 2017-04-28 11:20:10,040+0800 WARN  [jetty-main-1] *SYSTEM org.eclipse.jetty.util.component.AbstractLifeCycle - FAILED InstrumentedSelectChannelCon</span><br><span class="line">nector@0.0.0.0:80: java.net.SocketException: Permission denied</span><br><span class="line">jvm 1    | java.net.SocketException: Permission denied</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind(Net.java:433) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind(Net.java:425) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v2014</span><br><span class="line">0903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v2</span><br><span class="line">0140903]</span><br><span class="line">jvm 1    |      at org.sonatype.nexus.bootstrap.jetty.InstrumentedSelectChannelConnector.doStart(InstrumentedSelectChannelConnector.java:85) ~[nexus-bootstra</span><br><span class="line">p-2.12.0-01.jar:2.12.0-01]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) [jetty-util-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.Server.doStart(Server.java:293) [jetty-server-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64) [jetty-util-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.sonatype.nexus.bootstrap.jetty.JettyServer$JettyMainThread.run(JettyServer.java:247) [nexus-bootstrap-2.12.0-01.jar:2.12.0-01]</span><br><span class="line">jvm 1    | 2017-04-28 11:20:10,041+0800 WARN  [jetty-main-1] *SYSTEM org.eclipse.jetty.util.component.AbstractLifeCycle - FAILED org.eclipse.jetty.server.Server@7fafc8f3: java.net.SocketException: Permission denied</span><br><span class="line">jvm 1    | java.net.SocketException: Permission denied</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind0(Native Method) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind(Net.java:433) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.Net.bind(Net.java:425) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:223) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at sun.nio.ch.ServerSocketAdaptor.bind(ServerSocketAdaptor.java:74) ~[na:1.8.0_131]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.nio.SelectChannelConnector.open(SelectChannelConnector.java:187) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:316) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br><span class="line">jvm 1    |      at org.eclipse.jetty.server.nio.SelectChannelConnector.doStart(SelectChannelConnector.java:265) ~[jetty-server-8.1.16.v20140903.jar:8.1.16.v20140903]</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://help.sonatype.com/repomanager3/installation/run-as-a-service#RunasaService-systemd">centos7 开机启动</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在使用java开发用maven来管理工程常常会从远程仓库下载jar包，由于网络原因有时候会下载很慢；还有公司内部产品开发的代码又不能上传到中央仓库；故需要搭建一个maven的私有仓库。选择Sonatype Nexus来作为maven的私有仓库，Sonatype Nexus还可以做docker、npm等等的私有仓库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;  Redhat 7.5 操作系统&lt;/li&gt;
&lt;li&gt;  Sonatype Nexus Repository Manager 3.15&lt;/li&gt;
&lt;li&gt;  jdk1.8&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Nexus" scheme="http://tungsing.cc/tags/Nexus/"/>
    
    <category term="Sonatype Nexus" scheme="http://tungsing.cc/tags/Sonatype-Nexus/"/>
    
    <category term="Maven" scheme="http://tungsing.cc/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Redhat7.5 替换免费的yum</title>
    <link href="http://tungsing.cc/2019/02/28/linux/linux-yum/"/>
    <id>http://tungsing.cc/2019/02/28/linux/linux-yum/</id>
    <published>2019-02-28T01:18:23.901Z</published>
    <updated>2019-02-28T06:58:04.436Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>在没有激活的机器上使用yum命令无法使用，临时替换免费版。推荐使用正版！</p></blockquote><p><img src="/images/linux/redhat_yum.jpg"></p><span id="more"></span><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li><p>检查已经安装yum包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -qa | grep yum</span><br></pre></td></tr></table></figure></li><li><p>删除已安装的yum包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -qa | grep yum|xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure></li><li><p>下载yum相关包<br>浏览器打开<a href="https://opsx.alibaba.com/mirror">阿里镜像站</a>,网址可能会变</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># wget https://mirrors.aliyun.com/centos/7.6.1810/os/x86_64/Packages/yum-3.4.3-161.el7.centos.noarch.rpm</span><br><span class="line"># wegt https://mirrors.aliyun.com/centos/7.6.1810/os/x86_64/Packages/yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line"># wget https://mirrors.aliyun.com/centos/7.6.1810/os/x86_64/Packages/yum-plugin-fastestmirror-1.1.31-50.el7.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>安装yum</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -ivh yum-*</span><br></pre></td></tr></table></figure></li><li><p>下载源地址文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/yum.repos.d</span><br><span class="line"># wget http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></li><li><p>备份原源地址文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># mv /etc/yum.repos.d/redhat.repo /etc/yum.repos.d/redhat.repo.bak</span><br></pre></td></tr></table></figure></li><li><p>修改阿里源地址文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sed -i &quot;s;\$releasever;7.6.1810;g&quot; /etc/yum.repos.d/Centos-7.repo</span><br></pre></td></tr></table></figure><p> 7.6.1810为版本号</p></li><li><p>清理缓存和重新生成缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># yum clean all</span><br><span class="line"># yum makecache</span><br></pre></td></tr></table></figure></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/qq_32368213/article/details/80446688">RedHat 7替换yum为免费版 CentOS7 yum</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在没有激活的机器上使用yum命令无法使用，临时替换免费版。推荐使用正版！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/images/linux/redhat_yum.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://tungsing.cc/tags/Linux/"/>
    
    <category term="yum" scheme="http://tungsing.cc/tags/yum/"/>
    
    <category term="redhat" scheme="http://tungsing.cc/tags/redhat/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL 生成自定义证书</title>
    <link href="http://tungsing.cc/2019/01/06/web/container/ssl_cert/"/>
    <id>http://tungsing.cc/2019/01/06/web/container/ssl_cert/</id>
    <published>2019-01-06T07:29:37.157Z</published>
    <updated>2019-05-18T08:37:38.480Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本文用来记录通过OpenSSL生成自定义证书并在浏览器设置可信任</p></blockquote><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>Linux CentOS7 系统</li><li>nginx 1.12.2</li><li>Windows 10</li><li>IE 11</li><li>chrome 71</li></ul><span id="more"></span><h4 id="OpenSSL配置"><a href="#OpenSSL配置" class="headerlink" title="OpenSSL配置"></a>OpenSSL配置</h4><p>在linux系统中修改OpenSSL配置是为了,让chrome浏览器对为网站可信任<br><img src="/images/web/container/sslcert.jpg"></p><ol><li><p>拷贝OpenSSL配置文件准备修改</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/pki/tls/</span><br><span class="line"># cp openssl.cnf openssl_m.cnf</span><br></pre></td></tr></table></figure></li><li><p>修改openssl_m.cnf文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/pki/tls/openssl_m.cnf</span><br></pre></td></tr></table></figure><p> a. 找到[ req ] 段落，添加req_extentions  = v3_req配置：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">####################################################################</span><br><span class="line">[ req ]</span><br><span class="line">default_bits        = 2048</span><br><span class="line">default_md      = sha256</span><br><span class="line">default_keyfile     = privkey.pem</span><br><span class="line">distinguished_name  = req_distinguished_name</span><br><span class="line">attributes      = req_attributes</span><br><span class="line">x509_extensions = v3_ca # The extentions to add to the self signed cert</span><br><span class="line">#需要添加的配置</span><br><span class="line">req_extentions  = v3_req</span><br></pre></td></tr></table></figure><p> b. 添加v3_req配置信息</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ v3_req ]</span><br><span class="line"></span><br><span class="line"># Extensions to add to a certificate request</span><br><span class="line"></span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">#需要添加的配置</span><br><span class="line">subjectAltName = @alt_names</span><br></pre></td></tr></table></figure><p> c. 添加alt_names配置信息,可以添加多个</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ alt_names ]</span><br><span class="line">DNS.1 = www.test.com</span><br></pre></td></tr></table></figure><p> 注：这里填入的即为Subject Alternative Names的域名名称</p></li></ol><h4 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h4><p>直接用脚本生成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># create self-signed server certificate:</span><br><span class="line"></span><br><span class="line">read -p &quot;Enter your domain [www.example.com]: &quot; DOMAIN</span><br><span class="line"></span><br><span class="line">echo &quot;Create server key...&quot;</span><br><span class="line"></span><br><span class="line">openssl genrsa -des3 -out $DOMAIN.key 2048</span><br><span class="line"></span><br><span class="line">echo &quot;Create server certificate signing request...&quot;</span><br><span class="line"></span><br><span class="line">SUBJECT=&quot;/C=US/ST=Mars/L=iTranswarp/O=iTranswarp/OU=iTranswarp/CN=$DOMAIN&quot;</span><br><span class="line"></span><br><span class="line">#openssl req -new  -subj $SUBJECT -key $DOMAIN.key -out $DOMAIN.csr -extensions v3_req</span><br><span class="line">openssl req -new -subj $SUBJECT  -key $DOMAIN.key -out $DOMAIN.csr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;Remove password...&quot;</span><br><span class="line"></span><br><span class="line">mv $DOMAIN.key $DOMAIN.origin.key</span><br><span class="line">openssl rsa -in $DOMAIN.origin.key -out $DOMAIN.key</span><br><span class="line"></span><br><span class="line">echo &quot;Sign SSL certificate...&quot;</span><br><span class="line"></span><br><span class="line">openssl x509 -req -days 3650 -extfile /etc/pki/tls/openssl_m.cnf  -extensions v3_req   -in $DOMAIN.csr -signkey $DOMAIN.key -out $DOMAIN.crt</span><br><span class="line"></span><br><span class="line">echo &quot;TODO:&quot;</span><br><span class="line">echo &quot;Copy $DOMAIN.crt to /etc/nginx/ssl/$DOMAIN.crt&quot;</span><br><span class="line">echo &quot;Copy $DOMAIN.key to /etc/nginx/ssl/$DOMAIN.key&quot;</span><br><span class="line">echo &quot;Add configuration in nginx:&quot;</span><br><span class="line">echo &quot;server &#123;&quot;</span><br><span class="line">echo &quot;    ...&quot;</span><br><span class="line">echo &quot;    listen 443 ssl;&quot;</span><br><span class="line">echo &quot;    ssl_certificate     /etc/nginx/ssl/$DOMAIN.crt;&quot;</span><br><span class="line">echo &quot;    ssl_certificate_key /etc/nginx/ssl/$DOMAIN.key;&quot;</span><br><span class="line">echo &quot;&#125;&quot;</span><br></pre></td></tr></table></figure><p>关键点就是：-extfile /etc/pki/tls/openssl_m.cnf  -extensions v3_req给证书添加上扩展属性<br><img src="/images/web/container/certext.jpg"></p><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><ol><li>把生成的xxx.crt 和xxx.key 拷贝到/etc/nginx/ssl/</li><li>修改nginx.conf<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate     /etc/nginx/ssl/www.test.com.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/www.test.com.key;</span><br><span class="line">    listen       443 default_server;</span><br><span class="line">    listen       [::]:443 default_server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重启nginx服务</li></ol><h4 id="导入证书"><a href="#导入证书" class="headerlink" title="导入证书"></a>导入证书</h4><ol><li>把<a href="http://www.test.com.crt拷贝到windows系统中/">www.test.com.crt拷贝到windows系统中</a></li><li>双击<a href="http://www.test.com.crt文件打开/">www.test.com.crt文件打开</a></li><li>点击“Install Certificate”<br><img src="/images/web/container/install_cert.jpg"></li><li>选择“Local Machine” 点击“Next”<br><img src="/images/web/container/install_cert2.jpg"></li><li>选择“Place all certificates in the following store” 点击“Browser”</li><li>选择“Trusted Root Certification Authorities” 点击“OK”<br><img src="/images/web/container/install_cert3.jpg"></li><li>点击“Next” 点击“Finish”</li></ol><h4 id="再次访问网站"><a href="#再次访问网站" class="headerlink" title="再次访问网站"></a>再次访问网站</h4><p><img src="/images/web/container/sslcert_chrome.jpg"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://blog.csdn.net/zssai2015/article/details/85049905">OpenSSL创建的自签名证书在chrome端无法信任</a></li><li><a href="https://www.linuxidc.com/Linux/2016-12/138670.htm">OpenSSL生成v3证书方法及配置文件</a></li><li><a href="https://www.liaoxuefeng.com/article/0014189023237367e8d42829de24b6eaf893ca47df4fb5e000">给Nginx配置一个自签名的SSL证书</a></li><li><a href="https://github.com/michaelliao/itranswarp.js/blob/master/conf/ssl/gencert.sh">脚本</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本文用来记录通过OpenSSL生成自定义证书并在浏览器设置可信任&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Linux CentOS7 系统&lt;/li&gt;
&lt;li&gt;nginx 1.12.2&lt;/li&gt;
&lt;li&gt;Windows 10&lt;/li&gt;
&lt;li&gt;IE 11&lt;/li&gt;
&lt;li&gt;chrome 71&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="web" scheme="http://tungsing.cc/tags/web/"/>
    
    <category term="nginx" scheme="http://tungsing.cc/tags/nginx/"/>
    
    <category term="SSL" scheme="http://tungsing.cc/tags/SSL/"/>
    
    <category term="高可用" scheme="http://tungsing.cc/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    <category term="自定义证书" scheme="http://tungsing.cc/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>nginx+keepalived 主从搭建</title>
    <link href="http://tungsing.cc/2019/01/04/web/container/nginx_keepalived/"/>
    <id>http://tungsing.cc/2019/01/04/web/container/nginx_keepalived/</id>
    <published>2019-01-04T06:01:22.265Z</published>
    <updated>2019-05-18T08:37:31.309Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本文用来记录nginx加keepalived实现高可用，避免出现单点故障。</p></blockquote><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><ul><li>Linux CentOS7 系统</li><li>nginx 1.12.2</li><li>keepalived 1.3.5</li></ul><span id="more"></span><h4 id="规划图"><a href="#规划图" class="headerlink" title="规划图"></a>规划图</h4><p><img src="/images/web/container/nginx_keepalived.png"></p><table><thead><tr><th>虚拟IP</th><th>真实IP</th><th>hostname</th><th>nginx端口</th><th>主从</th></tr></thead><tbody><tr><td>10.200.1.200</td><td>10.200.1.5</td><td>nginx_master</td><td>80</td><td>Master</td></tr><tr><td>10.200.1.200</td><td>10.200.1.6</td><td>nginx_backup</td><td>80</td><td>Backup</td></tr></tbody></table><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>把搭建过程中的坑写的前边，避免下次再遇到</p><ol><li>机器的hostname一定要修改，不能出现相同的，相同会导致VIP不漂移</li><li>防火墙开放80端口</li><li>selinux对keepalived的影响，我遇到的是在执行监控脚本无法调用系统服务命令(systemctl stop keepalived),解决办法有3<ul><li>不调用系统服务命令来启动或关闭应用，只用kill杀死进程</li><li>关闭selinux</li><li>找到selinux具体是什么权限导致在监控脚本无法调用系统服务命令(我没找到)</li></ul></li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>在VirtualBox下安装CentOS7操作系统，配置IP地址和hostname</p></li><li><p>通过yum命令来安装epel-release、nginx、keepalived</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install epel-release -y</span><br><span class="line"># yum install nginx -y</span><br><span class="line"># yum install keepalived -y</span><br></pre></td></tr></table></figure></li><li><p>复制第一步安装好的系统，配置IP地址和hostname</p></li></ol><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="Master配置"><a href="#Master配置" class="headerlink" title="Master配置"></a>Master配置</h5><ol><li><p>keepalived 配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line">#全局配置</span><br><span class="line">global_defs &#123;</span><br><span class="line">    #运行keepalived的机器的一个标识</span><br><span class="line">    router_id LVS_DEVEL_MASTER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#VRRPD配置</span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">  #脚本监测</span><br><span class="line">  script &quot;/opt/check_nginx.sh&quot;</span><br><span class="line">  #脚本执行间隔，每2s检测一次</span><br><span class="line">  interval 2</span><br><span class="line">  #脚本结果导致的优先级变更，检测失败（脚本返回非0）则优先级 -20</span><br><span class="line">  weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#定义vrrp实例</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #指定keepalived的角色，MASTER表示此主机是主服务器，BACKUP表示此主机是备用服务器</span><br><span class="line">    state MASTER</span><br><span class="line">    #指定HA监测网络的接口。与本机 IP 地址所在的网络接口相同</span><br><span class="line">    interface enp0s3</span><br><span class="line">    #虚拟路由标识，这个标识是一个数字，同一个vrrp实例使用唯一的标识。即同一vrrp_instance下，MASTER和BACKUP必须是一致的  </span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    #定义优先级，数字越大，优先级越高</span><br><span class="line">    priority 100</span><br><span class="line">    #设定MASTER与BACKUP负载均衡器之间同步检查的时间间隔，单位是秒</span><br><span class="line">    advert_int 1</span><br><span class="line">    #设置验证类型和密码。主从必须一样</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    #VRRP HA 虚拟地址 如果有多个VIP，继续换行填写 </span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.200.1.200</span><br><span class="line">    &#125;</span><br><span class="line">    #执行nginx检测脚本。注意这个设置不能紧挨着写在vrrp_script配置块的后面（实验中碰过的坑），否则nginx监控失效！！</span><br><span class="line">    track_script &#123;</span><br><span class="line">       check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>监测脚本编写</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#检查nginx进程是否存在</span><br><span class="line">counter=$(ps -C nginx --no-heading|wc -l)</span><br><span class="line">pids=$(pidof keepalived)</span><br><span class="line">if [ &quot;$&#123;counter&#125;&quot; = &quot;0&quot; ]; then</span><br><span class="line">     #尝试启动一次nginx，停止5秒后再次检测</span><br><span class="line">     #/usr/bin/systemctl start nginx</span><br><span class="line">    sleep 2</span><br><span class="line">    counter=$(ps -C nginx --no-heading|wc -l)</span><br><span class="line">    if [ &quot;$&#123;counter&#125;&quot; = &quot;0&quot; -a &quot;$&#123;pids&#125;&quot; != &quot;&quot; ]; then</span><br><span class="line">        #如果启动没成功，就杀掉keepalive触发主备切换</span><br><span class="line">        #/usr/bin/systemctl stop keepalived</span><br><span class="line">        #如果关闭了selinux可以只用上边的命令，如果没有直接用kill</span><br><span class="line">        #kill -9 $pids</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>监测脚本授权</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chmod +x /opt/check_nginx.sh</span><br></pre></td></tr></table></figure></li></ol><h5 id="Backup配置"><a href="#Backup配置" class="headerlink" title="Backup配置"></a>Backup配置</h5><ol><li><p>keepalived 配置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># vi /etc/keepalived/keepalived.conf</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File for keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">    #和Master不同的地方</span><br><span class="line">    router_id LVS_DEVEL_BACKUP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">  script &quot;sh /opt/check_nginx.sh&quot; </span><br><span class="line">  interval 2 </span><br><span class="line">  weight -20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    #和Master不同的地方</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface enp0s3</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    #和Master不同的地方</span><br><span class="line">    priority 90</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        10.200.1.200</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       check_nginx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接把Master的脚本拷贝过来</p></li></ol><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ol><li><p>关闭master的nginx服务，测试nginx是否会被重启<br> <img src="/images/web/container/nk_master_1.jpg"><br> 检查页面是否正常</p></li><li><p>测试VIP是否会漂移</p><ul><li>注释检测脚本启动nginx服务的命令</li><li>查看页面<br><img src="/images/web/container/nk_master_2.jpg"></li><li>执行systemctl stop nginx命令，查看页面<br><img src="/images/web/container/nk_backup_1.jpg"></li></ul></li></ol><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>本记录只记录了核心的部分，如果是生成环境用，还有在熟悉其他的配置，比如发邮件配置等</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://juejin.im/entry/5b21c4c55188257d7541c860">nginx笔记</a></li><li><a href="https://blog.csdn.net/u010391029/article/details/48311699">Keepalived原理与实战精讲–VRRP协议</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;本文用来记录nginx加keepalived实现高可用，避免出现单点故障。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Linux CentOS7 系统&lt;/li&gt;
&lt;li&gt;nginx 1.12.2&lt;/li&gt;
&lt;li&gt;keepalived 1.3.5&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="web" scheme="http://tungsing.cc/tags/web/"/>
    
    <category term="nginx" scheme="http://tungsing.cc/tags/nginx/"/>
    
    <category term="高可用" scheme="http://tungsing.cc/tags/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    <category term="keepalived" scheme="http://tungsing.cc/tags/keepalived/"/>
    
  </entry>
  
  <entry>
    <title>redis info 命令</title>
    <link href="http://tungsing.cc/2018/12/10/cache/redis/redis-info/"/>
    <id>http://tungsing.cc/2018/12/10/cache/redis/redis-info/</id>
    <published>2018-12-10T07:11:59.361Z</published>
    <updated>2019-05-18T10:14:11.205Z</updated>
    
    <content type="html"><![CDATA[<p>收集了info命令的中文解释</p><table><thead><tr><th>信息</th><th>中文解释</th></tr></thead><tbody><tr><td>Server</td><td>服务信息</td></tr><tr><td>redis_version</td><td>Redis 服务器版本</td></tr><tr><td>redis_git_sha1</td><td>Git SHA1</td></tr><tr><td>redis_git_dirty</td><td>Git dirty flag</td></tr><tr><td>redis_build_id</td><td>redis build id</td></tr><tr><td>redis_mode</td><td>运行模式，单机或者集群</td></tr><tr><td>os</td><td>Redis 服务器的宿主操作系统</td></tr><tr><td>arch_bits</td><td>架构（32 或 64 位）</td></tr><tr><td>multiplexing_api</td><td>Redis 所使用的事件处理机制</td></tr><tr><td>process_id</td><td>服务器进程的 PID</td></tr><tr><td>run_id</td><td>Redis 服务器的随机标识符（用于 Sentinel 和集群）</td></tr><tr><td>tcp_port</td><td>TCP/IP 监听端口</td></tr><tr><td>uptime_in_seconds</td><td>自 Redis 服务器启动以来，经过的秒数</td></tr><tr><td>uptime_in_days</td><td>自 Redis 服务器启动以来，经过的天数</td></tr><tr><td>hz</td><td>redis内部调度（进行关闭timeout的客户端，删除过期key等等）频率，程序规定serverCron每秒运行10次</td></tr><tr><td>lru_clock</td><td>以分钟为单位进行自增的时钟，用于 LRU 管理</td></tr><tr><td>executable</td><td></td></tr><tr><td>config_file</td><td>配置文件路径</td></tr><tr><td>Clients</td><td>客户端信息</td></tr><tr><td>connected_clients</td><td>已连接客户端的数量（不包括通过从属服务器连接的客户端）</td></tr><tr><td>client_longest_output_list</td><td>当前连接的客户端当中，最长的输出列表</td></tr><tr><td>client_biggest_input_buf</td><td>当前连接的客户端当中，最大输入缓存</td></tr><tr><td>blocked_clients</td><td>正在等待阻塞命令(BLPOP、BRPOP、BRPOPLPUSH)的客户端的数量</td></tr><tr><td>Memory</td><td>内存信息</td></tr><tr><td>used_memory</td><td>由 Redis 分配器分配的内存总量，以字节(byte)为单位</td></tr><tr><td>used_memory_human</td><td>以人类可读的格式返回 Redis 分配的内存总量</td></tr><tr><td>used_memory_rss</td><td>从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps 等命令的输出一致。</td></tr><tr><td>used_memory_rss_human</td><td>以人类可读的格式返回Redis已分配的内存总量</td></tr><tr><td>used_memory_peak</td><td>Redis 的内存消耗峰值（以字节为单位）</td></tr><tr><td>used_memory_peak_human</td><td>以人类可读的格式返回 Redis 的内存消耗峰值</td></tr><tr><td>total_system_memory</td><td></td></tr><tr><td>total_system_memory_human</td><td></td></tr><tr><td>used_memory_lua</td><td>lua引擎所使用的内存大小(以字节为单位)</td></tr><tr><td>used_memory_lua_human</td><td></td></tr><tr><td>maxmemory</td><td></td></tr><tr><td>maxmemory_human</td><td></td></tr><tr><td>maxmemory_policy</td><td>内存淘汰机制，当内存使用达到阈值的时候，所有引起申请内存的命令会报错</td></tr><tr><td>mem_fragmentation_ratio</td><td>used_memory_rss和used_memory之间的比率，小于1表示使用了swap，大于1表示碎片比较多</td></tr><tr><td>mem_allocator</td><td>在编译时指定的redis所使用的内存分配器。可以是libc、jemalloc或者tcmalloc</td></tr><tr><td>Persistence</td><td>持久化信息</td></tr><tr><td>loading</td><td>服务器是否正在载入持久化文件</td></tr><tr><td>rdb_changes_since_last_save</td><td>离最近一次成功生成rdb文件，写入命令的个数，即有多少个写入命令没有持久化</td></tr><tr><td>rdb_bgsave_in_progress</td><td>服务器是否正在创建rdb文件</td></tr><tr><td>rdb_last_save_time</td><td>离最近一次成功创建rdb文件的时间戳。当前时间戳 - rdb_last_save_time=多少秒未成功生成rdb文件</td></tr><tr><td>rdb_last_bgsave_status</td><td>最近一次rdb持久化是否成功</td></tr><tr><td>rdb_last_bgsave_time_sec</td><td>最近一次成功生成rdb文件耗时秒数</td></tr><tr><td>rdb_current_bgsave_time_sec</td><td>如果服务器正在创建rdb文件，那么这个域记录的就是当前的创建操作已经耗费的秒数</td></tr><tr><td>aof_enabled</td><td>是否开启了aof</td></tr><tr><td>aof_rewrite_in_progress</td><td>标识aof的rewrite操作是否在进行中</td></tr><tr><td>aof_rewrite_scheduled</td><td>rewrite任务计划，当客户端发送bgrewriteaof指令，如果当前rewrite子进程正在执行，那么将客户端请求的bgrewriteaof变为计划任务，待aof子进程结束后执行rewrite</td></tr><tr><td>aof_last_rewrite_time_sec</td><td>最近一次aof rewrite耗费的时长</td></tr><tr><td>aof_current_rewrite_time_sec</td><td>如果rewrite操作正在进行，则记录所使用的时间，单位秒</td></tr><tr><td>aof_last_bgrewrite_status</td><td>上次bgrewriteaof操作的状态</td></tr><tr><td>aof_last_write_status</td><td>上次aof写入状态</td></tr><tr><td>Stats</td><td>一般统计信息</td></tr><tr><td>total_connections_received</td><td>新创建连接个数,如果新创建连接过多，过度地创建和销毁连接对性能有影响，说明短连接严重或连接池使用有问题，需调研代码的连接设置</td></tr><tr><td>total_commands_processed</td><td>redis处理的命令数</td></tr><tr><td>instantaneous_ops_per_sec</td><td>redis当前的qps，redis内部较实时的每秒执行的命令数</td></tr><tr><td>total_net_input_bytes</td><td>redis网络入口流量字节数</td></tr><tr><td>total_net_output_bytes</td><td>redis网络出口流量字节数</td></tr><tr><td>instantaneous_input_kbps</td><td>redis网络入口kps</td></tr><tr><td>instantaneous_output_kbps</td><td>redis网络出口kps</td></tr><tr><td>rejected_connections</td><td>拒绝的连接个数，redis连接个数达到maxclients限制，拒绝新连接的个数</td></tr><tr><td>sync_full</td><td>主从完全同步成功次数</td></tr><tr><td>sync_partial_ok</td><td>主从部分同步成功次数</td></tr><tr><td>sync_partial_err</td><td>主从部分同步失败次数</td></tr><tr><td>expired_keys</td><td>运行以来过期的key的数量</td></tr><tr><td>evicted_keys</td><td>运行以来剔除(超过了maxmemory后)的key的数量</td></tr><tr><td>keyspace_hits</td><td>命中次数</td></tr><tr><td>keyspace_misses</td><td>没命中次数</td></tr><tr><td>pubsub_channels</td><td>当前使用中的频道数量</td></tr><tr><td>pubsub_patterns</td><td>当前使用的模式的数量</td></tr><tr><td>latest_fork_usec</td><td>最近一次fork操作阻塞redis进程的耗时数，单位微秒</td></tr><tr><td>migrate_cached_sockets</td><td></td></tr><tr><td>Replication</td><td>主从信息</td></tr><tr><td>role</td><td>实例的角色，是master or slave</td></tr><tr><td>connected_slaves</td><td>连接的slave实例个数</td></tr><tr><td>master_repl_offset</td><td>主从同步偏移量,此值如果和上面的offset相同说明主从一致没延迟</td></tr><tr><td>repl_backlog_active</td><td>复制积压缓冲区是否开启</td></tr><tr><td>repl_backlog_size</td><td>复制积压缓冲大小</td></tr><tr><td>repl_backlog_first_byte_offset</td><td>复制缓冲区里偏移量的大小</td></tr><tr><td>repl_backlog_histlen</td><td>此值等于 master_repl_offset-repl_backlog_first_byte_offset,该值不会超过repl_backlog_size的大小</td></tr><tr><td>CPU</td><td>CPU信息</td></tr><tr><td>used_cpu_sys</td><td>将所有redis主进程在核心态所占用的CPU时求和累计起来</td></tr><tr><td>used_cpu_user</td><td>将所有redis主进程在用户态所占用的CPU时求和累计起来</td></tr><tr><td>used_cpu_sys_children</td><td>将后台进程在核心态所占用的CPU时求和累计起来</td></tr><tr><td>used_cpu_user_children</td><td>将后台进程在用户态所占用的CPU时求和累计起来</td></tr><tr><td>Cluster</td><td>集群信息</td></tr><tr><td>cluster_enabled</td><td>实例是否启用集群模式</td></tr><tr><td>Keyspace</td><td>数据库相关的统计信息</td></tr><tr><td>db0</td><td>db0的key的数量,以及带有生存期的key的数,平均存活时间</td></tr></tbody></table><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://stackoverflow.com/questions/10558465/memcached-vs-redis">stackoverflow</a></li><li><a href="https://coolshell.cn/articles/10739.html">LUA脚本</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;收集了info命令的中文解释&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;信息&lt;/th&gt;
&lt;th&gt;中文解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;服务信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td</summary>
      
    
    
    
    <category term="cache" scheme="http://tungsing.cc/categories/cache/"/>
    
    
    <category term="cache" scheme="http://tungsing.cc/tags/cache/"/>
    
    <category term="redis" scheme="http://tungsing.cc/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis集群搭建</title>
    <link href="http://tungsing.cc/2018/12/10/cache/redis/redis-cluster/"/>
    <id>http://tungsing.cc/2018/12/10/cache/redis/redis-cluster/</id>
    <published>2018-12-10T05:54:54.024Z</published>
    <updated>2019-05-18T08:34:32.881Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>  CentOS7 操作系统</li><li>  已安装好的Redis，具体安装看上一篇</li></ul><span id="more"></span><h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><h5 id="同台机器集群搭建"><a href="#同台机器集群搭建" class="headerlink" title="同台机器集群搭建"></a>同台机器集群搭建</h5><ol><li><p>创建文件夹<br>我们设计集群中 Redis 节点的端口号为 9000-9005，端口号即集群下各实例文件夹。数据存放在 端口号/data 文件夹中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># mkdir /opt/redis_cluster</span><br><span class="line"># cd /opt/redis_cluster</span><br><span class="line"># mkdir -p 9000/data 9001/data 9002/data 9003/data 9004/data 9005/data</span><br></pre></td></tr></table></figure></li><li><p>复制一个redis.conf文件到9000目录下，并修改<br>从源码包中复制配置文件并修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cp /opt/redis-4.0.11/redis.conf /opt/redis_cluster/9000</span><br><span class="line"># vi /opt/redis_cluster/9000/redis.conf</span><br></pre></td></tr></table></figure><p>重点修改以下配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">port 9000（每个节点的端口号）</span><br><span class="line">daemonize yes</span><br><span class="line">#bind 127.0.0.1(绑定当前机器 IP,可以不配置)</span><br><span class="line">dir /opt/redis_cluster/9000/data/（数据文件存放位置）</span><br><span class="line">pidfile /var/run/redis_9000.pid（pid 9000和port要对应）</span><br><span class="line">cluster-enabled yes（启动集群模式）</span><br><span class="line">cluster-config-file nodes9000.conf（9001和port要对应）</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line">appendonly yes</span><br><span class="line">protected-mode no(保护模式设置为no，如果启用了，则只能够通过lookback ip(127.0.0.1)访问Redis cache)</span><br></pre></td></tr></table></figure></li><li><p>把配置好的复制5份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cp -rf /opt/redis_cluster/9000/* /opt/redis_cluster/9001</span><br><span class="line"># cp -rf /opt/redis_cluster/9000/* /opt/redis_cluster/9002</span><br><span class="line"># cp -rf /opt/redis_cluster/9000/* /opt/redis_cluster/9003</span><br><span class="line"># cp -rf /opt/redis_cluster/9000/* /opt/redis_cluster/9004</span><br><span class="line"># cp -rf /opt/redis_cluster/9000/* /opt/redis_cluster/9005</span><br></pre></td></tr></table></figure></li><li><p>挨个修改实例的配置文件<br>通过搜索会发现其实只有四个点需要修改，我们全局替换下吧，进入相应的节点文件夹，做替换就好了，不放心再手工检查下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># vi /opt/redis_cluster/9001/redis.conf</span><br><span class="line">:%s/9001/9002</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9000/redis.conf</span><br><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9001/redis.conf</span><br><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9002/redis.conf</span><br><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9003/redis.conf</span><br><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9004/redis.conf</span><br><span class="line"># /usr/local/bin/redis-server /opt/redis_cluster/9005/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>检查是否启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef |grep redis</span><br><span class="line"># /usr/local/bin/redis-cli -h 127.0.0.1 -p 9000</span><br></pre></td></tr></table></figure><p>连接成功，set值会报(error) CLUSTERDOWN Hash slot not served错误，原因是实例之间无法相互发现，我们继续</p></li><li><p>安装集群所需软件<br>由于 Redis 集群是用ruby实现的集群管理，所以安装ruby相关软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum install ruby</span><br><span class="line"># yum install rubygems</span><br><span class="line"># gem install redis </span><br></pre></td></tr></table></figure><p>此处需要安装大于等于2.2的ruby版本</p></li><li><p>配置集群<br>通过redis-trib.rb命令创建集群，如果/usr/local/bin/目录没有，从源码包拷贝一个即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/bin/redis-trib.rb create --replicas 1 127.0.0.1:9000 127.0.0.1:9001 127.0.0.1:9002 127.0.0.1:9003 127.0.0.1:9004 127.0.0.1:9005</span><br></pre></td></tr></table></figure><p>交互过程中输入yes，同意即可，–replicas 1表示主从复制比例为 1:1，即一个主节点对应一个从节点</p></li><li><p>验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  # /usr/local/bin/redis-cli -h 127.0.0.1 -p 9000</span><br><span class="line">127.0.0.1:9000&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:1122</span><br><span class="line">cluster_stats_messages_pong_sent:1060</span><br><span class="line">cluster_stats_messages_sent:2182</span><br><span class="line">cluster_stats_messages_ping_received:1060</span><br><span class="line">cluster_stats_messages_pong_received:1102</span><br><span class="line">cluster_stats_messages_received:2162</span><br><span class="line">127.0.0.1:9000&gt; cluster nodes</span><br><span class="line">4f8c920acc559c11153c5aaf856820ca39c443cb 10.200.1.11:9000@19000 myself,master - 0 1544424469000 1 connected 0-5460</span><br><span class="line">ec2af1f981c08bf01131545369c0600b91c5172c 10.200.1.11:9004@19004 slave 4f8c920acc559c11153c5aaf856820ca39c443cb 0 1544424468000 5 connected</span><br><span class="line">bcc85b3502c107f18557d11889739a2b6f0ed896 10.200.1.11:9003@19003 slave aadb89ee25e9849e758529c477f9af6ede99850a 0 1544424467000 4 connected</span><br><span class="line">923d1b67ee012927bf4de345143d5f93670c97b5 10.200.1.11:9001@19001 master - 0 1544424468909 2 connected 5461-10922</span><br><span class="line">aadb89ee25e9849e758529c477f9af6ede99850a 10.200.1.11:9002@19002 master - 0 1544424469920 3 connected 10923-16383</span><br><span class="line">70fad7237c2e8bb308167f7e8b7a7b670d333564 10.200.1.11:9005@19005 slave 923d1b67ee012927bf4de345143d5f93670c97b5 0 1544424468000 6 connected</span><br><span class="line">127.0.0.1:9000&gt;   </span><br></pre></td></tr></table></figure><p>通过命令，可以详细的看出集群信息和各个节点状态，主从信息以及连接数、槽信息等</p></li><li><p>测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/bin/redis-cli -c -h 10.200.1.11 -p 9000</span><br><span class="line">10.200.1.11:9000&gt; set name test</span><br><span class="line">-&gt; Redirected to slot [5798] located at 10.200.1.11:9001</span><br><span class="line">OK</span><br><span class="line">10.200.1.11:9001&gt; get name</span><br><span class="line">&quot;test&quot;</span><br><span class="line">10.200.1.11:9001&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;cache:test3&quot;</span><br><span class="line">10.200.1.11:9001&gt; </span><br></pre></td></tr></table></figure></li></ol><p>  -c 表示集群模式</p><h5 id="不同机器的集群搭建"><a href="#不同机器的集群搭建" class="headerlink" title="不同机器的集群搭建"></a>不同机器的集群搭建</h5><p>和同一台机器搭建唯一的区别是通过redis-trib.rb命令创建集群，随便在一个实例上执行即可</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.cnblogs.com/mafly/p/redis_cluster.html">Redis 集群搭建详细指南</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;  CentOS7 操作系统&lt;/li&gt;
&lt;li&gt;  已安装好的Redis，具体安装看上一篇&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="cache" scheme="http://tungsing.cc/categories/cache/"/>
    
    
    <category term="cache" scheme="http://tungsing.cc/tags/cache/"/>
    
    <category term="redis" scheme="http://tungsing.cc/tags/redis/"/>
    
    <category term="cluster" scheme="http://tungsing.cc/tags/cluster/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装redis</title>
    <link href="http://tungsing.cc/2018/12/10/cache/redis/redis-install-linux/"/>
    <id>http://tungsing.cc/2018/12/10/cache/redis/redis-install-linux/</id>
    <published>2018-12-10T02:53:59.451Z</published>
    <updated>2019-05-18T08:34:42.616Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>  CentOS7 操作系统</li><li>  Redis4 安装包</li></ul><span id="more"></span><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h5><ol><li><p>添加常用源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install redis -y</span><br></pre></td></tr></table></figure></li><li><p>启动redis</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start redis.service</span><br></pre></td></tr></table></figure></li><li><p>把redis服务作为开机启动项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># systemctl enable redis.service</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># redis-cli</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name test</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">&quot;test&quot;</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li></ol><h5 id="源码方式"><a href="#源码方式" class="headerlink" title="源码方式"></a>源码方式</h5><ol><li><a href="https://redis.io/download">官网</a>下载所需源码安装包<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># wget http://download.redis.io/releases/redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure></li><li>解压源码<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tar -zxvf redis-4.0.11.tar.gz</span><br></pre></td></tr></table></figure></li><li>打开解压目录执行安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /opt/redis-4.0.11/src</span><br><span class="line"># make</span><br><span class="line"># make install</span><br></pre></td></tr></table></figure>安装过程中如果出现少依赖包，安装好依赖包后再执行此命令，<br>默认安装到/usr/local/bin/目录，也可以通过–prefix=/path自定义安装目录</li><li>检查是否安装成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/local/bin/</span><br><span class="line"># ls</span><br><span class="line">redis-benchmark  redis-check-aof  redis-check-rdb  redis-cli  redis-sentinel  redis-server</span><br></pre></td></tr></table></figure></li><li>配置并启动<br>拷贝/opt/redis-4.0.11/redis.conf文件到一个目录或不拷贝直接用,然后启动<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/bin/redis-server /opt/redis-4.0.11/redis.conf</span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /usr/local/bin/redis-cli</span><br></pre></td></tr></table></figure></li></ol><h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>开始Redis之旅吧！</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;  CentOS7 操作系统&lt;/li&gt;
&lt;li&gt;  Redis4 安装包&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="cache" scheme="http://tungsing.cc/categories/cache/"/>
    
    
    <category term="cache" scheme="http://tungsing.cc/tags/cache/"/>
    
    <category term="redis" scheme="http://tungsing.cc/tags/redis/"/>
    
  </entry>
  
</feed>
